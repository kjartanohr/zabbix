#Version 2022.01.12

#Cofiguration file for Zabbix agent daemon (Unix)
# To get more information about Zabbix, visit http://www.zabbix.com

############ GENERAL PARAMETERS #################

### Option: PidFile
#       Name of PID file.
#
# Mandatory: no
# Default:
# PidFile=/tmp/zabbix_agentd.pid

### Option: LogType
#       Specifies where log messages are written to:
#               system  - syslog
#               file    - file specified with LogFile parameter
#               console - standard output
#
# Mandatory: no
# Default:
 LogType=file

### Option: LogFile
#       Log file name for LogType 'file' parameter.
#
# Mandatory: no
# Default:
# LogFile=

LogFile=/tmp/zabbix_agentd.log

### Option: LogFileSize
#       Maximum size of log file in MB.
#       0 - disable automatic log rotation.
#
# Mandatory: no
# Range: 0-1024
# Default:
 LogFileSize=100

### Option: DebugLevel
#       Specifies debug level:
#       0 - basic information about starting and stopping of Zabbix processes
#       1 - critical information
#       2 - error information
#       3 - warnings
#       4 - for debugging (produces lots of information)
#       5 - extended debugging (produces even more information)
#
# Mandatory: no
# Range: 0-5
# Default:
 DebugLevel=4

### Option: SourceIP
#       Source IP address for outgoing connections.
#
# Mandatory: no
# Default:
# SourceIP=

### Option: EnableRemoteCommands
#       Whether remote commands from Zabbix server are allowed.
#       0 - not allowed
#       1 - allowed
#
# Mandatory: no
# Default:
 EnableRemoteCommands=1

### Option: LogRemoteCommands
#       Enable logging of executed shell commands as warnings.
#       0 - disabled
#       1 - enabled
#
# Mandatory: no
# Default:
 LogRemoteCommands=1

##### Passive checks related

### Option: Server
#       List of comma delimited IP addresses (or hostnames) of Zabbix servers.
#       Incoming connections will be accepted only from the hosts listed here.
#       If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally.
#
# Mandatory: no
# Default:
# Server=

Server=10.0.6.102,10.54.36.253,10.90.1.104,10.14.16.213,10.14.16.214,95.141.81.190,92.220.211.253,92.220.216.51,10.0.99.10,10.0.99.9,10.222.222.84,10.0.55.17,10.99.3.4,192.0.2.2,192.0.2.1,192.0.2.15

### Option: ListenPort
#       Agent will listen on this port for connections from the server.
#
# Mandatory: no
# Range: 1024-32767
# Default:
# ListenPort=10050

### Option: ListenIP
#       List of comma delimited IP addresses that the agent should listen on.
#       First IP address is sent to Zabbix server if connecting to it to retrieve list of active checks.
#
# Mandatory: no
# Default:
# ListenIP=0.0.0.0

### Option: StartAgents
#       Number of pre-forked instances of zabbix_agentd that process passive checks.
#       If set to 0, disables passive checks and the agent will not listen on any TCP port.
#
# Mandatory: no
# Range: 0-100
# Default:
 StartAgents=30

##### Active checks related

### Option: ServerActive
#       List of comma delimited IP:port (or hostname:port) pairs of Zabbix servers for active checks.
#       If port is not specified, default port is used.
#       IPv6 addresses must be enclosed in square brackets if port for that host is specified.
#       If port is not specified, square brackets for IPv6 addresses are optional.
#       If this parameter is not specified, active checks are disabled.
#       Example: ServerActive=10.0.6.102:20051,zabbix.domain,[::1]:30051,::1,[12fc::1]
#
# Mandatory: no
# Default:
# ServerActive=

#ServerActive=10.0.6.102,92.221.210.55,10.54.36.253,10.90.1.104

### Option: Hostname
#       Unique, case sensitive hostname.
#       Required for active checks and must ///////ostname as configured on the server.
#       Value is acquired from HostnameItem if undefined.
#
# Mandatory: no
# Default:
# Hostname=

#Hostname=Zabbix server

### Option: HostnameItem
#       Item used for generating Hostname if it is undefined. Ignored if Hostname is defined.
#       Does not support UserParameters or aliases.
#
# Mandatory: no
# Default:
 HostnameItem=system.hostname

### Option: HostMetadata
#       Optional parameter that defines host metadata.
#       Host metadata is used at host auto-registration process.
#       An agent will issue an error and not start if the value is over limit of 255 characters.
#       If not defined, value will be acquired from HostMetadataItem.
#
# Mandatory: no
# Range: 0-255 characters
# Default:
# HostMetadata=

### Option: HostMetadataItem
#       Optional parameter that defines an item used for getting host metadata.
#       Host metadata is used at host auto-registration process.
#       During an auto-registration request an agent will log a warning message if
#       the value returned by specified item is over limit of 255 characters.
#       This option is only used when HostMetadata is not defined.
#
# Mandatory: no
# Default:
# HostMetadataItem=

### Option: RefreshActiveChecks
#       How often list of active checks is refreshed, in seconds.
#
# Mandatory: no
# Range: 60-3600
# Default:
# RefreshActiveChecks=120

### Option: BufferSend
#       Do not keep data longer than N seconds in buffer.
#
# Mandatory: no
# Range: 1-3600
# Default:
 BufferSend=3600

### Option: BufferSize
#       Maximum number of values in a memory buffer. The agent will send
#       all collected data to Zabbix Server or Proxy if the buffer is full.
#
# Mandatory: no
# Range: 2-65535
# Default:
 BufferSize=10000

### Option: MaxLinesPerSecond
#       Maximum number of new lines the agent will send per second to Zabbix Server
#       or Proxy processing 'log' and 'logrt' active checks.
#       The provided value will be overridden by the parameter 'maxlines',
#       provided in 'log' or 'logrt' item keys.
#
# Mandatory: no
# Range: 1-1000
# Default:
MaxLinesPerSecond=200

############ ADVANCED PARAMETERS #################

### Option: Alias
#       Sets an alias for an item key. It can be used to substitute long and complex item key with a smaller and simpler one.
#       Multiple Alias parameters may be present. Multiple parameters with the same Alias key are not allowed.
#       Different Alias keys may reference the same item key.
#       For example, to retrieve the ID of user 'zabbix':
#       Alias=zabbix.userid:vfs.file.regexp[/etc/passwd,^zabbix:.:([0-9]+),,,,\1]
#       Now shorthand key zabbix.userid may be used to retrieve data.
#       Aliases can be used in HostMetadataItem but not in HostnameItem parameters.
#
# Mandatory: no
# Range:
# Default:

### Option: Timeout
#       Spend no more than Timeout seconds on processing
#
# Mandatory: no
# Range: 1-30
# Default:
Timeout=30

### Option: AllowRoot
#       Allow the agent to run as 'root'. If disabled and the agent is started by 'root', the agent
#       will try to switch to the user specified by the User configuration option instead.
#       Has no effect if started under a regular user.
#       0 - do not allow
#       1 - allow
#
# Mandatory: no
# Default:
AllowRoot=1

### Option: User
#       Drop privileges to a specific, existing user on the system.
#       Only has effect if run as 'root' and AllowRoot is disabled.
#
# Mandatory: no
# Default:
# User=zabbix

### Option: Include
#       You may include individual files or all files in a directory in the configuration file.
#       Installing Zabbix will create include directory in /usr/local/etc, unless modified during the compile time.
#
# Mandatory: no
# Default:
# Include=

# Include=/usr/local/etc/zabbix_agentd.userparams.conf
# Include=/usr/local/etc/zabbix_agentd.conf.d/
# Include=/usr/local/etc/zabbix_agentd.conf.d/*.conf

####### USER-DEFINED MONITORED PARAMETERS #######

### Option: UnsafeUserParameters
#       Allow all characters to be passed in arguments to user-defined parameters.
#       The following characters are not allowed:
#       \ ' " ` * ? [ ] { } ~ $ ! & ; ( ) < > | # @
#       Additionally, newline characters are not allowed.
#       0 - do not allow
#       1 - allow
#
# Mandatory: no
# Range: 0-1
# Default:
 UnsafeUserParameters=1

### Option: UserParameter
#       User-defined parameter to monitor. There can be several user-defined parameters.
#       Format: UserParameter=<key>,<shell command>
#       See 'zabbix_agentd' directory for examples.
#
# Mandatory: no
# Default:
# UserParameter=

####### LOADABLE MODULES #######

### Option: LoadModulePath
#       Full path to location of agent modules.
#       Default depends on compilation options.
#
# Mandatory: no
# Default:
# LoadModulePath=${libdir}/modules

### Option: LoadModule
#       Module to load at agent startup. Modules are used to extend functionality of the agent.
#       Format: LoadModule=<module.so>
#       The modules must be located in directory specified by LoadModulePath.
#       It is allowed to include multiple LoadModule parameters.
#
# Mandatory: no
# Default:
# LoadModule=

####### TLS-RELATED PARAMETERS #######

### Option: TLSConnect
#       How the agent should connect to server or proxy. Used for active checks.
#       Only one value can be specified:
#               unencrypted - connect without encryption
#               psk         - connect using TLS and a pre-shared key
#               cert        - connect using TLS and a certificate
#
# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)
# Default:
# TLSConnect=unencrypted

### Option: TLSAccept
#       What incoming connections to accept.
#       Multiple values can be specified, separated by comma:
#               unencrypted - accept connections without encryption
#               psk         - accept connections secured with TLS and a pre-shared key
#               cert        - accept connections secured with TLS and a certificate
#
# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)
# Default:
# TLSAccept=unencrypted

### Option: TLSCAFile
#       Full pathname of a file containing the top-level CA(s) certificates for
#       peer certificate verification.
#
# Mandatory: no
# Default:
# TLSCAFile=

### Option: TLSCRLFile
#       Full pathname of a file containing revoked certificates.
#
# Mandatory: no
# Default:
# TLSCRLFile=

### Option: TLSServerCertIssuer
#      Allowed server certificate issuer.
#
# Mandatory: no
# Default:
# TLSServerCertIssuer=

### Option: TLSServerCertSubject
#      Allowed server certificate subject.
#
# Mandatory: no
# Default:
# TLSServerCertSubject=

### Option: TLSCertFile
#       Full pathname of a file containing the agent certificate or certificate chain.
#
# Mandatory: no
# Default:
# TLSCertFile=

### Option: TLSKeyFile
#       Full pathname of a file containing the agent private key.
#
# Mandatory: no
# Default:
# TLSKeyFile=

### Option: TLSPSKIdentity
#       Unique, case sensitive string used to identify the pre-shared key.
#
# Mandatory: no
# Default:
# TLSPSKIdentity=

### Option: TLSPSKFile
#       Full pathname of a file containing the pre-shared key.
#
# Mandatory: no
# Default:

UserParameter=find.core,find /var/log/dump/usermode/  -mtime -30 -type f  -exec ls -lh {} \; |perl -ne 's#/var.*/##; print'|grep -i -v "total 0\|script\|snmpd\|cpbackup\|scanengine_k"

UserParameter=find.kernel.core,ls -lh /var/log/crash/|grep -v "total 0"

UserParameter=fwaccel.stat,fwaccel stat|head -n 5

UserParameter=cli.show.configuration,/etc/cli.sh -c "show configuration"|grep -v "Exported by\|Language version:"

UserParameter=date,date

UserParameter=installer.ready,/etc/cli.sh -c "show installer packages all"

UserParameter=messages[*],echo 123
#UserParameter=messages[*],perl -e '$time_old = `cat /tmp/zabbix_timestamp_messages_$1 2>/dev/null`; chomp $time_old;  foreach (`cat /var/log/messages`){@split = split/\s{1,}/; $split[2] =~ s/://g; $time_new = $split[2]; if ($time_old eq $split[2]){$print = 1;next}; next unless $print; print; } system "echo $time_new >/tmp/zabbix_timestamp_messages_$1"' | grep "`hostname`" | grep -v "running clish\|cmd by\|Destroying the lists of sensors\|xpand"

UserParameter=dmesg,perl -e '$time_old = `cat /tmp/zabbix_dmesg_timestamp 2>/dev/null`; chomp $time_old;  foreach (`dmesg`){@split = split/\s{1,}/; $split[0] =~ s/\[|\]|\.//g; $time_new = $split[0]; if ($time_old eq $split[0]){$print = 1;next}; next unless $print; print; } system "echo $time_new >/tmp/zabbix_dmesg_timestamp"' ; echo 1 >/sys/module/printk/parameters/printk_time

UserParameter=secure,perl -ne '$data = undef if /zabbix marker/; $data .= $_; END{print $data}' /var/log/secure | grep -v "zabbix marker"; echo "zabbix marker" >>/var/log/secure

#UserParameter=fw_ctrl_pstat,perl -e '$out = `fw ctl pstat 2>/dev/null`; exit unless $out; print $out'

UserParameter=arp_limit,dbget ip:arp:cache_size

UserParameter=arp_current,arp -an|wc -l

UserParameter=top,top -b -n1

UserParameter=top_memory,ps -eo pmem,pcpu,pid,ppid,user,stat,args | sort -k 1 -r | head -6|sed 's/$/\n/'

UserParameter=top_cpu,ps -eo pcpu,pmem,pid,ppid,user,stat,args | sort -k 1 -r | head -6|sed 's/$/\n/'

UserParameter=zoombie,ps -eo stat|grep -w Z|wc -l

UserParameter=df,df -h

UserParameter=sar,sar -u

UserParameter=vgdisplay,vgdisplay

UserParameter=pvdisplay,pvdisplay

UserParameter=lvdisplay,lvdisplay

UserParameter=mount_ro,mount|grep "(ro)"

UserParameter=last,last

#UserParameter=vpn_certificate,ls /tmp/is_mgmt &>/dev/null && perl -e 'exit unless `fw stat` =~ /not a FireWall/; system "cpca_client lscert -stat Valid -kind IKE"; '

#UserParameter=vpn_certificate_count,ls /tmp/is_mgmt &>/dev/null && cpca_client lscert |perl -ne 'BEGIN{exit unless `fw stat` =~ /not a FireWall/};next unless /certs found/; @split = split/\s/; print $split[0]'

#UserParameter=vpn_certificate_old,ls /tmp/is_mgmt &>/dev/null && cpca_client lscert -stat Valid -kind IKE|perl -ne 'BEGIN{$year = (split/\s{1,}/,`date`)[5]; }chomp; $subject = $_ if /^Subject/;next unless /Not_After:/; @split = split/\s{1,}/; print "$subject $split[11]\n" if $split[11] eq $year'

#UserParameter=vpn_certificate_exipred,ls /tmp/is_mgmt &>/dev/null && cpca_client lscert -stat Expired|perl -ne 'BEGIN{exit unless `fw stat` =~ /not a FireWall/};$ok = 0}$ok = 1 if /0 certs found./; END{if ($ok){print 0}else{print 1}}'

UserParameter=cphaprob_stat[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_gw_cluster"){print 8888;exit} $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cphaprob state", "s", 600); if ($out =~ /active/i && $out =~ /standby/i){print 1}elsif($out =~ /down|init|ready/i){print 2}else{print 9999}'

UserParameter=cphaprob_state[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_gw_cluster"){print 8888;exit} $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cphaprob state", "s", 600); if ($out =~ /active/i && $out =~ /standby/i){print 1}elsif($out =~ /down|init|ready/i){print 2}else{print 9999}'

#UserParameter=cphaprob_stat_standby[*],perl -e 'unless (-f "/tmp/is_gw_cluster"){print 8888;exit} $out = `source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cphaprob stat`; chomp $out; if ($out =~ /Standby/i){print 1}else{print 9999}'
UserParameter=cphaprob_stat_standby[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $found = 9999; unless (-f "/tmp/is_gw_cluster"){print 8888;exit} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; cphaprob stat", "a", 600)){ last if /Active PNOTEs:/; $found = 1 if /STANDBY/i} print $found;'

UserParameter=cphaprob_stat_down[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_gw_cluster"){print 8888;exit} $error = 0; foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1& >/dev/null ; cphaprob stat", "a", 600)){last if /Legend:/i; next unless /down|active!/i; $error = 1} END{print $error}'


UserParameter=cphaprob_a_if_down[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_gw"){print 8888;exit} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cphaprob -a if", "a", 600)){next unless /DOWN/; $down = 1; print} '


UserParameter=cphaprob_list[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $error = 0; $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cphaprob -l list", "s", 600); foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cphaprob -l list", "a", 600)){next unless /problem/i; $error = 1 } print $error'

UserParameter=cphaprob_list_not_ok[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_gw"){print 8888;exit} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cphaprob -l list", "a", 600)){if (/Device Name/){($name) = /Device Name:\s{1,}(.*)/} if (/Current state/){($state) = /Current state:\s{1,}(.*)/} if ($name && $state){next if $state eq "OK"; print "$name $state\n"; $name = ""};}'

UserParameter=cpwd_admin_list,cpwd_admin list

UserParameter=cpwd_admin_list_not_ok,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $vsx = 1 if run_cmd("vsx", "s", 600) =~ /usage:/; foreach (run_cmd("cpwd_admin list", "a", 600)){next if /^APP/;@split = split/\s+/; if ($vsx){ print if $split[3] ne "E";}else{print if $split[2] ne "E";}}'

UserParameter=fw_lichosts,fw lichosts

UserParameter=cpstat_serial,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f hw_info", "a", 600)){next unless /SN:/;@split = split/\s{1,}/; print $split[2]}'

UserParameter=cpstat_manufacture,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f hw_info", "a", 600)){next unless /Manufacture/;@split = split/\s{1,}/; exit if $split[2] eq "Other"; print $split[2]}'

UserParameter=cpstat_name,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f hw_info", "a", 600)){next unless /Name:/;@split = split/\s{1,}/; print $split[4]}'

#UserParameter=cpstat_kmem_failed_alloc,ls /tmp/is_gw &>/dev/null && perl -e 'exit if `fw stat` =~ /not a FireWall/; foreach (`cpstat fw -f kmem`){next unless /kmem - failed alloc/;@split = split/\s{1,}/; exit if $split[4] eq "-"; print $split[4]}'

UserParameter=cpstat_vpn_enc_error,ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} my $out = run_cmd("cpstat vpn -f all", "s", 600); ($found) = $out =~ /Encryption errors:\s{1,}(\d{1,})/; print $found'

UserParameter=cpstat_vpn_dec_error,ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} my $out = run_cmd("cpstat vpn -f all", "s", 600); ($found) = $out =~ /Decryption errors:\s{1,}(\d{1,})/; print $found'

UserParameter=cpstat_vpn_no_response,ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} my $out = run_cmd("cpstat vpn -f all", "s", 600); ($found) = $out =~ /no response from peer.*?:\s{1,}(\d{1,})/; print $found'

UserParameter=cpstat_thresholds[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat thresholds", "a", 600)){next unless /Number of active thresholds/; ($count) = /Number of active thresholds:\s{1,}(\d*)/; if ($count || $count == 0){print $count}else{print 9999}}'

UserParameter=cplic_print,cplic print

UserParameter=cpprod_util_is_firewall,cpprod_util FwIsFirewallModule

UserParameter=cpprod_util_is_management,cpprod_util FwIsControl

UserParameter=cpprod_util_securexl,cpprod_util FwIsSecureXL

UserParameter=cpstat_disk[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f multi_disk", "a", 600)){s/\|//g; @split = split/\s{1,}/; next unless $split[0] =~ m#$1#;print $split[6]}'

UserParameter=cpstat_disk_root,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f multi_disk", "a", 600)){s/\|//g; @split = split/\s{1,}/; next unless $split[0] =~ m#/$#;print $split[6]}'

UserParameter=cpstat_disk_boot,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f multi_disk", "a", 600)){s/\|//g; @split = split/\s{1,}/; next unless $split[0] =~ m#/boot#;print $split[6]}'

UserParameter=cpstat_disk_log,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f multi_disk", "a", 600)){s/\|//g; @split = split/\s{1,}/; next unless $split[0] =~ m#/var/log#;print $split[6]}'

UserParameter=cpstat_error,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} if (run_cmd("cpstat os -f multi_disk", "s", 600) =~ /Failed to establish/){print 1}else{print 0}'

UserParameter=cp_conf_sic_state,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $ok = 1 if run_cmd("cp_conf sic state", "s", 600) =~ /Trust established/; END{if($ok){print 1}else{print 0}}'

UserParameter=ips_stat,ls /tmp/is_gw &>/dev/null && ips stat

UserParameter=bash[*],bash -c "$1"

UserParameter=clish[*],clish -c "$1"

UserParameter=smartctl_failed,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (`cat /proc/partitions`){@split = split/\s{1,}/; next unless $split[4] =~ /sd/; $split[4] =~ s/\d//g;push @disk,$split[4]}END{@disk_u = do { my %seen; grep { !$seen{$_}++ } @disk };foreach $disk (@disk_u){foreach (run_cmd("smartctl -H /dev/$disk", "a", 600)){$bad = 1 if /FAILED/}}} if ($bad){print 1}else{print 0}'

#UserParameter=proc_interrupts,cat /proc/interrupts

UserParameter=tracepath_8888, traceroute -n -T vg.no|perl -ne '@split = split/\s+/; ($last) =  $split[2] =~ /(.)$/; print $last'

UserParameter=is_mgmt,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("fwm ver", "s", 600);if ($out =~ m/This is Check Point Security Management Server/){print 1; system "touch /tmp/is_mgmt"}else {unlink "/tmp/is_mgmt"; print 0}'

UserParameter=is_mgmt_policy_server,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (run_cmd("fwm ver", "s", 600) =~ /This is Check Point/){print 0;exit} ($ver) = run_cmd("fw ver", "s", 600) =~ /version R(\d+)\./; unless (-f "/opt/CPsuite-R$ver/fw1/log/install_policy.elg") {print 0;exit} if (`wc -l /opt/CPsuite-R$ver/fw1/log/install_policy.elg 2>/dev/null` =~ /^0/){print 0; unlink "/tmp/is_mgmt_policy_server"; }else{print 1; system "touch /tmp/is_mgmt_policy_server"} '

UserParameter=is_gw,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("fw stat", "s", 600) ;if ($out =~ m/localhost/){print 1; system "touch /tmp/is_gw"}else {print 0; unlink "/tmp/is_gw"}'

UserParameter=is_openserver,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("cpstat os -f hw_info", "s", 600); if ($out =~ /open server/i){print 1}else{print 2}'

UserParameter=is_vmware,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("cpstat os -f hw_info", "s", 600); if ($out =~ /vmware/i){print 1}else{print 2}'


UserParameter=is_gw_cluster,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("cphaprob stat", "s", 600) ;if ($out =~ m/Cluster Mode:/i){print 1;system "touch /tmp/is_gw_cluster"}else {print 0; unlink "/tmp/is_gw_cluster"}'

UserParameter=is_gw_vsx,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} if (run_cmd("vsx stat", "s", 600) =~ /VSX Gateway Status/){print 1; system "touch /tmp/is_gw_vsx"}else{print 0; unlink "/tmp/is_gw_vsx"}'

UserParameter=is_gw_vsx_vs_active[*],vsenv $1 &>/dev/null ; echo >/tmp/vs$1 && echo 1

UserParameter=is_gw_cluster_active,source /etc/profile.d/vsenv.sh; vsenv 0&>/dev/null ; perl -e '$out = `cphaprob stat 2>/dev/null |grep local` ;if ($out =~ m/Active/i){print 1; system "touch /tmp/is_gw_cluster_active"}else {print 0; unlink "/tmp/is_gw_cluster_active"}'

UserParameter=is_smartevent_server, perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("echo 7|evconfig 2>/dev/null", "s", 600); exit unless $out; if ($out =~ /SmartEvent Server.*disabled, select to enable/){print 0}elsif ($out =~ /SmartEvent Server.*enabled, select to disable/){print 1; system "touch /tmp/is_smartevent_server"}else{print 3; unlink "/tmp/is_smartevent_server"} '

UserParameter=is_smartevent_correlation_unit,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("echo 7|evconfig", "s", 600); exit unless $out; if ($out =~ /SmartEvent Correlation Unit.*disabled, select to enable/){print 0}elsif ($out =~ /SmartEvent Correlation Unit.*enabled, select to disable/){print 1; system "touch /tmp/is_smartevent_correlation_unit"}else{print 3; unlink "/tmp/is_smartevent_correlation_unit"} ' 

UserParameter=is_virtual,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} if (grep /Hyper-V|VMware|Virtio/i,run_cmd("lspci", "a", 600)){print 1;system "touch /tmp/is_virtual"}else{print 2; unlink "/tmp/is_virtual"}'

UserParameter=is_ips[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $count = 0; $count++ if grep /Enabled/,run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; ips stat", "a", 600); if ($count > 0){print 1; system "touch /tmp/enabled_blades_vs$1_ips &>/dev/null" }else{print 0; unlink "/tmp/enabled_blades_vs$1_ips"}'

UserParameter=is_urlf[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $count = 0; $count++ unless grep /Status:.*-/,run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat urlf", "a", 600); if ($count > 0){print 1; system "touch /tmp/enabled_blades_vs$1_urlf &>/dev/null" }else{print 0; unlink "/tmp/enabled_blades_vs$1_urlf"}'

UserParameter=is_appi[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $count = 0; $count++ unless grep /Status:.*-/,run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat appi", "s", 600); if ($count > 0){print 1; system "touch /tmp/enabled_blades_vs$1_appi &>/dev/null" }else{print 0; unlink "/tmp/enabled_blades_vs$1_appi"}'

UserParameter=is_tx[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $count = 0; $count++ if grep /Status:.*0/,run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat scrub", "s", 600); if ($count > 0){print 1; system "touch /tmp/enabled_blades_vs$1_tx &>/dev/null" }else{print 0; unlink "/tmp/enabled_blades_vs$1_tx"}'

UserParameter=is_ia[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $count = 0; $count++ unless grep /Status:.*-/,run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat identityServer", "s", 600); if ($count > 0){print 1; system "touch /tmp/enabled_blades_vs$1_ia &>/dev/null" }else{print 0; unlink "/tmp/enabled_blades_vs$1_ia"}'

UserParameter=is_te[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $count = 0; $count++ unless grep /Status short description:.*unknown/,run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat threat-emulation", "s", 600); $count++ unless grep /Status:.*-/,run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat threat-emulation", "s", 600); if ($count == 2){print 1; system "touch /tmp/enabled_blades_vs$1_te &>/dev/null" }else{print 0; unlink "/tmp/enabled_blades_vs$1_te"}'

UserParameter=is_av[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $count = 0; $count++ unless grep /Status:.*-/,run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat antimalware", "s", 600); $count++ if grep /AB DB version:.*\d/,run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat antimalware -f update_status", "s", 600); if ($count == 2){print 1; system "touch /tmp/enabled_blades_vs$1_av &>/dev/null" }else{print 0; unlink "/tmp/enabled_blades_vs$1_av"}'

UserParameter=is_vpn[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $counter = 0; foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat vpn -f all", "s", 600)){next if /Kernel|version/; @split = split/\s{0,}:\s{1,}/; next unless $split[1] =~ /\d/; $counter += $split[1]}; if ($counter > 0){print 1; system "touch /tmp/enabled_blades_vs$1_vpn &>/dev/null" }else{print 0; unlink "/tmp/enabled_blades_vs$1_vpn"}'

UserParameter=is_cvpn[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $count = 0; $count++ if grep /enabled/,run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cvpnd_admin isEnabled", "s", 600); if ($count > 0){print 1; system "touch /tmp/enabled_blades_vs$1_cvpn &>/dev/null" }else{print 0; unlink "/tmp/enabled_blades_vs$1_cvpn"}'

UserParameter=enabled_blades[*],source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit if run_cmd("fw stat", "s", 600) =~ /not a FireWall/; exit if run_cmd("fw stat", "s", 600) =~ /InitialPolicy/; foreach (1 .. 10){$out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null; enabled_blades", "s", 600); sleep 1; next if $out =~ /No such file or directory/; last if $out =~ /^fw/}; print $out; system "echo -n \"$out\">/tmp/enabled_blades_vs$1"'

UserParameter=is_cpsead_running,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("cpstat cpsead 2>&1", "s", 600); if ($out =~ /Process is alive:\s{1,}1/){print 1}elsif($out =~ /Process is alive:\s{1,}0/){print 2}elsif($out =~ /No product has flag/){print 8888}else{print 9999}'

UserParameter=cpsead_no_disk_space,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("cpstat cpsead", "s", 600) ;exit unless $out; if ($out =~ m/No Free Disk Space:.*1/){print 1}else {print 0}'

UserParameter=cpsead_log_counter,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("cpstat cpsead", "s", 600) ; ($logs) = $out =~ m/Logs Processed: *(\d*)/; print $logs'

UserParameter=cpsead_connected_to_sem,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("cpstat cpsead", "s", 600) ;exit unless $out; if ($out =~ m/Connected to SEM: *1/){print 1}else {print 0}'

UserParameter=cpsemd_running,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("cpstat cpsemd", "s", 600); if ($out =~ /Process is alive:\s{1,}1/){print 1}elsif($out =~ /Process is alive:\s{1,}0/){print 2}elsif($out =~ /No product has flag/){print 8888}else{print 9999}'


UserParameter=cpsemd_events_counter,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("cpstat cpsemd", "s", 600) ; ($logs) = $out =~ m/New events handled: *(\d*)/; print $logs'

UserParameter=cpsemd_database_full,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("cpstat cpsemd", "s", 600) ;exit unless $out; if (($logs) = $out =~ m/Database is full: *0/){print 0}else {print 1}'

UserParameter=vsx_fwaccel_conns,vsx stat -v|perl -ne 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} chomp;next unless m/\| S /;($vsid) = m/(\d\d?)/; my $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null; fwaccel conns", "s", 600); print "$vsid:$_\n" foreach (split /\n/,$out);'

UserParameter=fw_ctl_drop,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 25; system "fw ctl zdebug -m fw + drop &>/tmp/fw_ctl_zdebug.log"}; alarm 0; foreach (split /\n/,`cat /tmp/fw_ctl_zdebug.log`){$print=1 if /fw_log_/;next if /Rulebase drop/;print "$_\n" if $print }; '

UserParameter=fw_ctl_count,ps xa|grep "fw ctl"|grep -v grep|wc -l

UserParameter=ntpstat,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("ntpstat", "s", 600); unless ($out){print 1;exit} if ($out =~ /unsynchronised/){print 2}elsif ($out =~ /ntp is running/){print 3}elsif ($out =~ /synchronised/){print 4}else{print 5} '

UserParameter=fw_ctl_debug,fw ctl debug

UserParameter=cpstat_f_sensors_os,cpstat -f sensors os

UserParameter=show_sysenv_all,clish -c 'show sysenv all'


UserParameter=tecli_ad_att_show,tecli ad att show

UserParameter=tecli_ad_e_v,tecli ad e v

UserParameter=tecli_cache_ttl_display,tecli cache ttl display

UserParameter=tecli_debug_stat,tecli debug stat

UserParameter=tecli_show_cloud_identity,tecli show cloud identity

UserParameter=tecli_control_status,tecli control status

UserParameter=cpinfo_y_all,cpinfo -y all

UserParameter=vsx_cpstat_blades_f_fw,vsx stat -v|perl -ne 'chomp;next unless m/\| S /;($vsid) = m/(\d\d?)/; my $out = `source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null; cpstat blades -f fw`; print "$vsid:$_\n" foreach (split /\n/,$out);'

UserParameter=postgres.elg[*],ls /tmp/is_mgmt &>/dev/null && perl -ne '$data = undef if /zabbix marker $1/; $data .= $_; END{print $data}' $FWDIR/log/postgres.elg | grep -v "zabbix marker"| sort -u; echo "zabbix marker $1" >>$FWDIR/log/postgres.elg

UserParameter=ngm_start.elg[*],ls /tmp/is_mgmt &>/dev/null && perl -ne '$data = undef if /zabbix marker $1/; $data .= $_; END{print $data}' $FWDIR/log/ngm_start.elg | sort -u; echo "zabbix marker $1" >>$FWDIR/log/ngm_start.elg

UserParameter=cpsemd.elg[*],ls /tmp/is_mgmt &>/dev/null && perl -ne '$data = undef if /zabbix marker $1/; $data .= $_; END{print $data}' $FWDIR/log/cpsemd.elg | grep -v "zabbix marker"| sort -u; echo "zabbix marker $1" >>$FWDIR/log/cpsemd.elg

UserParameter=install_policy.elg[*],ls /tmp/is_mgmt &>/dev/null && perl -ne '$data = undef if /zabbix marker $1/; $data .= $_; END{print $data}' $FWDIR/log/install_policy.elg | grep -v "zabbix marker"| sort -u; echo "zabbix marker $1" >>$FWDIR/log/install_policy.elg

UserParameter=dbsync.elg[*],ls /tmp/is_mgmt &>/dev/null && perl -ne '$data = undef if /zabbix marker $1/; $data .= $_; END{print $data}' $FWDIR/log/dbsync.elg | grep -v "zabbix marker"| sort -u; echo "zabbix marker $1" >>$FWDIR/log/dbsync.elg

UserParameter=fwm.elg[*],ls /tmp/is_mgmt &>/dev/null && perl -ne '$data = undef if /zabbix marker $1/; $data .= $_; END{print $data}' $FWDIR/log/fwm.elg | grep -v "zabbix marker"| sort -u; echo "zabbix marker $1" >>$FWDIR/log/fwm.elg

#UserParameter=fwk.elg[*],ls /tmp/is_gw &>/dev/null ; /etc/profile.d/vsenv.sh; vsenv $2&>/dev/null && perl -ne '$data = undef if /zabbix marker $1/; $data .= $_; END{print $data}' $FWDIR/log/fwk.elg | grep -v "zabbix marker"| sort -u; echo "zabbix marker $1" >>$FWDIR/log/fwk.elg

UserParameter=te_ping[*],vsenv $1 &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} if (run_cmd("/etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; curl -k https://te.checkpoint.com/tecloud/Ping 2>/dev/null", "s", 600) =~ /Pong/){print 1}else{print 0}'

#UserParameter=is_cpinfo_running,ps xa|grep -v grep|grep cpinfo

#UserParameter=vs0_dig_vg.no,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 5; $out = `source /etc/profile.d/vsenv.sh; vsenv 0&>/dev/null && dig vg.no`; alarm 0; };($timeout) = $out =~ m/Query time: (\d*) msec/; if ($@){print -1} else {print $timeout;}'

#UserParameter=ips_stat_enabled_vs0,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 5; $out = `source /etc/profile.d/vsenv.sh; vsenv 0 &>/dev/null && ips stat`; alarm 0; };exit unless $out =~ /enabled/i; if ($out =~ /enabled/i){print 1} elsif ($out =~ /disabled/i){print 0} else {print 3;}'

#UserParameter=ips_stat_profile[*],ls /tmp/is_gw &>/dev/null && ls /tmp/vs$1 &>/dev/null && grep ips /tmp/enabled_blades_vs$1 &>/dev/null && perl -e 'foreach (`source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null && ips stat`){exit if /IPS Blade is disabled/; next unless /IPS Profile:/; ($search) = /IPS Profile:\s{1,}(.*)/; exit unless $search; print $search}'

#UserParameter=ips_stat_version_vs0,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 5; $out = `source /etc/profile.d/vsenv.sh; vsenv 0 &>/dev/null && ips stat`; alarm 0; };exit unless $out =~ /enabled/i; ($search) = $out =~ /IPS Update Version: (.*)/; exit unless $search; print $search'

#UserParameter=ips_stat_bypass_vs0,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 5; $out = `source /etc/profile.d/vsenv.sh; vsenv 0 &>/dev/null && ips stat`; alarm 0; };exit unless $out =~ /enabled/i; if ($out =~ /Bypass Under Load: Off/i){print 0} elsif ($out =~ /Bypass Under Load: On/i){print 1} else {print 3;}'

#UserParameter=ips_stat_global_detect_vs0,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 5; $out = `source /etc/profile.d/vsenv.sh; vsenv 0 &>/dev/null && ips stat`; alarm 0; };exit unless $out =~ /enabled/i; if ($out =~ /Global Detect: On/i){print 1} elsif ($out =~ /Global Detect: Off/i){print 0} else {print 3;}'

#UserParameter=adlog_a_statistics_total[*],ls /tmp/is_gw &>/dev/null && grep identityServer /tmp/enabled_blades_vs$1 &>/dev/null && perl -e '$out = `source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null && adlog a statistics`; ($total) = $out =~ /TOTAL\t*(.*)/;print $total if $total;;'

UserParameter=pdp_monitor_all_count[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_ia  &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; pdp monitor all|wc -l

UserParameter=adlog_a_query_all_count[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_ia  &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; adlog a query all|wc -l

UserParameter=pdp_update_all[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_ia &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} my $cmd = "source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; pdp update all" || die "Missing input. Need a command to run"; my $ttl = "$2" || 6000; print run_cmd($cmd, "s", $ttl);'

UserParameter=pdp_connections_pep[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_ia &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} my $cmd = "source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; pdp_connections_pep" || die "Missing input. Need a command to run"; my $ttl = "$2" || 6000; print run_cmd($cmd, "s", $ttl);'

UserParameter=pdp_connections_pep_disconnected[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_ia  &>/dev/null && perl -e 'foreach (`source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; pdp connections pep`){next unless /^\|/; @split = split/\s{1,}/; next unless $split[3] =~ /^\d/;;print $split[3] unless $split[11] =~ /Connected/;}'

UserParameter=pdp_connections_pep_ping[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_ia  &>/dev/null && perl -e 'foreach (`source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; pdp connections pep`){next unless /^\|/; @split = split/\s{1,}/; next unless $split[3] =~ /^\d/; $out = `source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; ping -w 1 -c 1 $split[3]`; print "$split[3]\n" if $out =~ /100% packet loss/;}'

UserParameter=pdp_control_sync[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_ia  &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; pdp control sync

UserParameter=pep_show_stat_pdps_count[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_ia  &>/dev/null && perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 18; $out = `source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; pep show stat`; ($pdps) = $out =~ /Connected PDPs.*: *(.*)/; print $pdps; alarm 0; };print "Command timeout" if $@'

UserParameter=pep_show_pdp_all_ping[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_ia  &>/dev/null && perl -e 'foreach (`source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; pep show pdp all`){next unless /^\d/; @split = split/\s{1,}/; $out = `source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; ping -w 1 -c 1 $split[0]`; print "$split[0]\n" if $out =~ /100% packet loss/;}'

UserParameter=pep_show_pdp_all_count[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_ia  &>/dev/null && perl -e 'foreach (`source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; pep show pdp all`){next unless /^\d/; @split = split/\s{1,}/; $sum += $split[4];} print $sum'

UserParameter=tecli_show_cloud_quota_hours_left[*],ls /tmp/is_gw &>/dev/null && ls /tmp/enabled_blades_vs$1_te  &>/dev/null && perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 10; $out = `source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; tecli show cloud quota`; ($hours) = $out =~ /Remain:\s*(.*) Hour/; print $hours; alarm 0; };print "Command timeout" if $@;'

UserParameter=tecli_show_cloud_quota_hours_used_vs1,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 10; while(-f "/tmp/bladesStatus"){sleep 1;} $blades = `source /etc/profile.d/vsenv.sh; vsenv 1 &>/dev/null ;  enabled_blades 2>/dev/null`; exit unless $blades =~ m/ThreatEmulation/; $out = `source /etc/profile.d/vsenv.sh; vsenv 1 &>/dev/null ; tecli show cloud quota`; ($hours) = $out =~ /Usage for gw:\s*(.*) Hour/; print $hours; alarm 0; };print "Command timeout" if $@;'

UserParameter=tecli_show_cloud_queue_vs0,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 10; while(-f "/tmp/bladesStatus"){sleep 1;} $blades = `source /etc/profile.d/vsenv.sh; vsenv 0 &>/dev/null ;  enabled_blades 2>/dev/null`; exit unless $blades =~ m/ThreatEmulation/; $out = `source /etc/profile.d/vsenv.sh; vsenv 0 &>/dev/null ; tecli show cloud queue`; print $out; alarm 0; };print "Command timeout" if $@;'

UserParameter=tecli_show_cloud_queue_count_vs0,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 10; while(-f "/tmp/bladesStatus"){sleep 1;} $blades = `source /etc/profile.d/vsenv.sh; vsenv 0 &>/dev/null ;  enabled_blades 2>/dev/null`; exit unless $blades =~ m/ThreatEmulation/; $out = `source /etc/profile.d/vsenv.sh; vsenv 0 &>/dev/null && tecli show cloud queue|wc -l`; print ($out-4); alarm 0; };print "Command timeout" if $@;'

UserParameter=tecli_show_cloud_queue_problem_count_vs0,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 10; while(-f "/tmp/bladesStatus"){sleep 1;} $blades = `source /etc/profile.d/vsenv.sh; vsenv 0 &>/dev/null ;  enabled_blades 2>/dev/null`; exit unless $blades =~ m/ThreatEmulation/; $out = `source /etc/profile.d/vsenv.sh; vsenv 0 &>/dev/null ; tecli show cloud queue|grep "Cloud Connectivity Problem, waiting to resend"|wc -l`; print $out; alarm 0; };print "Command timeout" if $@;'


UserParameter=tecli_not_running[*],ls /tmp/is_gw &>/dev/null && perl -e 'unless (-f "/tmp/enabled_blades_vs$1_te"){print 3; exit }; $error = 1 if `source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null && tecli show cloud queue` =~ /daemon did not respond or not running/; if ($error) {print 2}else{print 1}'

UserParameter=bond_grep_down,perl -ne '$interface = $_ if /Slave Interface:/; next unless /down/; @split = split/\//, $ARGV; print $split[4]." ".(split/ /,$interface)[2] ' /proc/net/bonding/bond*

UserParameter=bond_failure_count,perl -e 'foreach (`cat /proc/net/bonding/bond* 2>/dev/null`){next unless /Link Failure Count/; chomp; @split = split/ /; $total += $split[3];} print $total || 0'

UserParameter=clish_show_snapshots,clish -c "show snapshots"

UserParameter=clish_show_snapshots_count,perl -e 'foreach (`clish -c "show snapshots"`){exit if /^$/; if (/---/){$print++; next} next unless $print; $count++;} END{print $count}'

#UserParameter=ping_ip[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $vsid = "$2" || 0; $out = run_cmd("ping -w 1 -c 1 $1", "s", 60); if ($out =~ /100% packet loss/){print 9999; exit} ($ms) = $out =~ /ttl=.* time=(.*) ms/; $ms =~ s/\..*//; print $ms;'
#2022.12.06
UserParameter=ping_ip[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $vsid = "$2" || 0; $out = run_cmd("ping -w 1 -c 1 $1", "s", 60); if ($out =~ /100% packet loss/){print 9999; exit} ($ms) = $out =~ m#= .*?/.*?/(.*?)/.*? ms#; print $ms;'
UserParameter=ping[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $vsid = "$2" || 0; $out = run_cmd("ping -w 1 -c 1 $1", "s", 60); if ($out =~ /100% packet loss/){print 9999; exit} ($ms) = $out =~ m#= .*?/.*?/(.*?)/.*? ms#; print $ms;'

UserParameter=dig_dns1[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 5; $ip_dns = "$1"; exit unless $ip_dns; $out = run_cmd("dig vg.no \@$ip_dns", "s", 600); alarm 0; };($timeout) = $out =~ m/Query time: (\d*) msec/; if ($@){print 9999} else {print $timeout;};'

UserParameter=dns_check_resolv.conf[*],perl -ne 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} next unless /^nameserver/; @split = split / /; next unless $split[1]; eval { local $SIG{ALRM} = sub { die $split[1] }; alarm 5; $out = run_cmd("vsenv $1 &>/dev/null; dig vg.no \@$split[1]", "s", 600); alarm 0; };if ($@){$return .= $split[1]}; END{print $return}' /etc/resolv.conf

UserParameter=fw_stat_old[*], perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw(); $blade = run_cmd("vsenv $1 &>/dev/null", "s", 600); exit if $blade =~ /does not exist/;  %month = (Jan=>1,Feb=>2,Mar=>3,Apr=>4,May=>5,Jun=>6,Jul=>7,Aug=>8,Sept=>9,Oct=>10,Nov=>11,Dec=>12); @date_split = split/\s{1,}/,run_cmd("date", "s", 600); $month_today_number = $month{$date_split[1]}; foreach (run_cmd("vsenv $1 &>/dev/null ; fw stat", "a", 600)){exit if /not a FireWall/; next unless /localhost/; exit if /InitialPolicy/; @fw_stat_split = split/\s{1,}/; $fw_stat_split[2] =~ s/\d//g; $fw_stat_month_number = $month{$fw_stat_split[2]}}; print ($month_today_number - $fw_stat_month_number)'

UserParameter=interrupts_get[*],perl -ne 'BEGIN{$i=-1}next if /CPU0|NMI|LOC|ERR|MIS|edge/; $type_int =$2; $cpu_int = ($1+1); $i++; next unless $i == $type_int ;s/^\s+//;@cpu = split/\s+/; print $cpu[$cpu_int] ' /proc/interrupts

UserParameter=interrupts_get_total[*],perl -e 'foreach $i (1..2){ foreach (`cat /proc/interrupts`){next if /CPU0|NMI|LOC|ERR|MIS|edge/; ; $cpu_int = ($1+1) ;s/^\s+//;@cpu = split/\s+/; exit unless defined $cpu[$cpu_int]; $interrupts_total[$i] +=$cpu[$cpu_int];  } sleep 1;} print ($interrupts_total[2] - $interrupts_total[1])'

UserParameter=fw_ctl_affinity-l-r,ls /tmp/is_mgmt &>/dev/null && fw ctl affinity -l -r

#UserParameter=interface_error,perl -ne 's/^\s+//;next if /^bond|^Int|^face|^lo/; @split = split/\s+/; $total += $split[2]; $total += $split[9];  END{print $total}' /proc/net

UserParameter=interface_drop,perl -ne 's/^\s+//;next if /^bond|^Int|^face|^lo/; s/^.*?://; s/^\s{1,}//; @split = split/\s{1,}/; $total += $split[2]; $total += $split[10]; END{print $total}' /proc/net/dev

UserParameter=interface_frame,perl -ne 's/^\s+//;next if /^bond|^Int|^face|^lo/; @split = split/\s+/; $total += $split[5];  END{print $total}' /proc/net/dev

UserParameter=fw_ctl_pstat_-l_smem_failed,ls /tmp/is_gw &>/dev/null && fw ctl pstat -l|perl -ne '$found = 1 if /smem/; next unless $found; next unless /failed alloc/; ($return) = /alloc, (.*) failed alloc/; print $return; exit'

UserParameter=fw_ctl_pstat_-l_kmem_failed,ls /tmp/is_gw &>/dev/null && fw ctl pstat -l|perl -ne '$found = 1 if /kmem/; next unless $found; next unless /failed alloc/; ($return) = /alloc, (.*) failed alloc/; print $return; exit'

UserParameter=fw_ctl_pstat_-l_hmem_failed,ls /tmp/is_gw &>/dev/null && fw ctl pstat -l|perl -ne '$found = 1 if /hmem/; next unless $found; next unless /failed alloc/; ($return) = /alloc, (.*) failed alloc/; print $return; exit'

UserParameter=fw_ctl_pstat_-l_kbufs_failed,ls /tmp/is_gw &>/dev/null && fw ctl pstat -l|perl -ne '$found = 1 if /kbufs/; next unless $found; next unless /not preallocated/; ($return) = /allocated, (.*) failed/; print $return; exit'

UserParameter=fw_ctl_tcpstrstat_-p_conns_total[*],ls /tmp/is_gw &>/dev/null && perl -e '$out = `source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`; exit unless $out =~ /General Counters:/; ($conn_total) = $out =~ /Total num of connections \.*  (.*)/; print $conn_total'

UserParameter=fw_ctl_tcpstrstat_-p_conns_template[*],ls /tmp/is_gw &>/dev/null && perl -e '$out = `source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`; exit unless $out =~ /General Counters:/; ($conn_total) = $out =~ /Total num of connections from template\.*  (.*)/; print $conn_total'

UserParameter=fw_ctl_tcpstrstat_-p_http_psl_con[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; foreach(`source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`){$found = 1 if /HTTP_PSL/; next unless $found; next unless /Concurrent num of connections/; ($return) = /Concurrent num of connections \.*  (.*)/; print $return; exit }'

UserParameter=fw_ctl_tcpstrstat_-p_http_dispatcher_con[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; foreach(`source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`){$found = 1 if /HTTP_DISPATCHER/; next unless $found; next unless /Concurrent num of connections/; ($return) = /Concurrent num of connections \.*  (.*)/; print $return; exit }'

UserParameter=fw_ctl_tcpstrstat_-p_http_inspect_streaming_con[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; foreach(`source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`){$found = 1 if /INSPECT_STREAMING/; next unless $found; next unless /Concurrent num of connections/; ($return) = /Concurrent num of connections \.*  (.*)/; print $return; exit }'

UserParameter=fw_ctl_tcpstrstat_-p_inspect_streaming_mt_con[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; foreach(`source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`){$found = 1 if /INSPECT_STREAMING_MT_0/; next unless $found; next unless /Concurrent num of connections/; ($return) = /Concurrent num of connections \.*  (.*)/; print $return; exit }'

UserParameter=fw_ctl_tcpstrstat_-p_aspii_mt_con[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; foreach(`source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`){$found = 1 if /ASPII_MT/; next unless $found; next unless /Concurrent num of connections/; ($return) = /Concurrent num of connections \.*  (.*)/; print $return; exit }'

UserParameter=fw_ctl_tcpstrstat_-p_mal_psl_con[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; foreach(`source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`){$found = 1 if /MAL_PSL/; next unless $found; next unless /Concurrent num of connections/; ($return) = /Concurrent num of connections \.*  (.*)/; print $return; exit }'

UserParameter=fw_ctl_tcpstrstat_-p_con[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; foreach(`source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`){$found = 1 if /General Counters:/; next unless $found; next unless /Concurrent num of connections/; ($return) = /Concurrent num of connections \.*  (.*)/; print $return; exit }'

UserParameter=fw_ctl_tcpstrstat_-p_packets_s[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; $out1 = `source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`; sleep 5; $out2 = `fw ctl tcpstrstat -p`; ($return1) = $out1 =~ /Total num of packets \.*  (.*)/; $out2 =~ /Total num of packets \.*  (.*)/; print (($return1 - $return2) /5); exit '

UserParameter=fw_ctl_tcpstrstat_-p_bytes_s[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; $out1 = `source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`; sleep 5; $out2 = `fw ctl tcpstrstat -p`; ($return1) = $out1 =~ /Total packets in bytes \.*  (.*)/; $out2 =~ /Total packets in bytes \.*  (.*)/; print (($return1 - $return2) /5); exit '

UserParameter=fw_ctl_tcpstrstat_-p_urgent_packets[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; $out = `source /etc/profile.d/vsenv.sh; vsenv $1 && fw ctl tcpstrstat -p`; ($return) = $out =~ /Total num of urgent packets \.*  (.*)/; print $return; '

UserParameter=fw_ctl_tcpstrstat_-p_invalid_syn[*],ls /tmp/is_gw &>/dev/null && perl -e 'exit if `source /etc/profile.d/vsenv.sh; vsenv $1` =~ /does not exist/; $out = `source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl tcpstrstat -p`; ($return) = $out =~ /Total num of invalid SYN retransmissions \.*  (.*)/; print $return; '

UserParameter=fw_ctl_tcpstrstat_-p_conn_template[*],ls /tmp/is_gw &>/dev/null && perl -e '$out = `source /etc/profile.d/vsenv.sh; vsenv 3 ; fw ctl tcpstrstat -p`; exit unless $out =~ /General Counters:/; ($conn_total) = $out =~ /Total num of connections \.*  (.*)/; ($template)= $out =~ /Total num of connections from template\.*  (.*)/; print int($template/($conn_total/100))'

UserParameter=show_installer_status_agent,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless -d "/opt/CPshrd-R80/"; foreach (run_cmd(qq#clish -c "show installer status"#, "a", 600)){ next unless /Agent/; if (/enabled/){print 1}else{print }}'

UserParameter=show_installer_status_network_connection,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless -d "/opt/CPshrd-R80/"; foreach (run_cmd(qq#clish -c "show installer status"#, "a", 600)){ next unless /Network connection/; if (/connected/){print 1}else{print }}'

UserParameter=show_installer_status_license,perl -e 'exit unless -d "/opt/CPshrd-R80/"; foreach (`clish -c "show installer status"`){ next unless /License/; if (/valid/){print 1}else{print }}'

UserParameter=show_installer_status_build_version,perl -e 'exit unless -d "/opt/CPshrd-R80/"; foreach (`clish -c "show installer status"`){ next unless /Build number/; ($build) = /:\s+(\d+)/; print $build }'

UserParameter=show_installer_status_days_since_update,perl -e 'exit unless -d "/opt/CPshrd-R80/"; foreach (`clish -c "show installer status"`){ next unless /Update from cloud/; ($day_update) = /:\s+last updated on \w+ \w+ (\d+)/; exit unless $day_update; ($day_date) = `date` =~ /\w+ \w+ (\d+) \d/; print ($day_date - $day_update)}; '

UserParameter=show_installer_packages_download,perl -e 'BEGIN{$ok = 0} foreach (`clish -c "show installer packages"`){$ok = 1 if /Available for Download/} print $ok'

UserParameter=vpn_ike,ls /tmp/is_gw &>/dev/null && perl -e ' foreach (`cpstat vpn -f IKE`){ next unless /IKE current SAs initiated by peer/; ($ike) = /:\s+(\d*)/; print $ike}'

UserParameter=vpn_ike_user_count,ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN{$count=0}  foreach (`echo "show tunnels IKE all"|vpn shell`){next unless /user/;$count++; END{print $count}}'

UserParameter=vpn_ike_name[*],perl -e 'BEGIN{unless (-f "/tmp/is_gw"){print 8888; exit} $ok=0}  foreach (`echo "show tunnels IKE all"|vpn shell`){next unless /$1/; $ok = 1}; print $ok'

UserParameter=vpn_max_users,ls /tmp/is_gw &>/dev/null && perl -e 'foreach (`cplic print`){ next unless /CPSB-SSLVPN-/i; (@count) = /CPSB-SSLVPN-(\d+) /ig; foreach (@count){$return = $_ if $_ > $return}}  print $return || 0'

#UserParameter=iotop_disk_read,perl -e 'exit unless -f "/usr/sbin/iotop"; $out = `iotop -b -o -n1 -a -k`; ($disk_read) = $out =~ /Total DISK READ :\s+(\d*)\./; print $disk_read || 0'
UserParameter=iotop_disk_read,perl -e 'BEGIN{require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless -f "/usr/sbin/iotop"; $out = run_cmd("iotop -b -o -n1 -a -k", "s", 60); ($disk_read) = $out =~ /Total DISK READ :\s+(\d*)\./; print $disk_read || 0'

#UserParameter=iotop_disk_write,perl -e 'exit unless -f "/usr/sbin/iotop"; $out = `iotop -b -o -n1 -a -k`; ($disk_read) = $out =~ /Total DISK WRITE :\s+(\d*)\./; print $disk_read || 0'
UserParameter=iotop_disk_write,perl -e 'BEGIN{require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless -f "/usr/sbin/iotop"; $out = run_cmd("iotop -b -o -n1 -a -k", "s", 60); ($disk_read) = $out =~ /Total DISK WRITE :\s+(\d*)\./; print $disk_read || 0'

UserParameter=cpu_processes[*],perl -e 'foreach (`ps xaueT`){@split = split/\s+/; $cpu = $split[2]; $cpu =~ s/\..*//; print "$split[10]" if $cpu > $1}'

UserParameter=spoofing_detect,ls /tmp/is_mgmt &>/dev/null && perl -ne 'BEGIN{exit unless (-f $ARGV[0]); }($ifname) = /:officialname \((.*)\)/ if /:officialname/ ; if (/:monitor_anti_spoofing \(true\)/){print $ifname."\n"}' $FWDIR/conf/objects_5_0.C|sort -u

UserParameter=spoofing_disabled,ls /tmp/is_mgmt &>/dev/null && perl -ne 'BEGIN{exit unless (-f $ARGV[0]); }($ifname) = /:officialname \((.*)\)/ if /:officialname/ ; if (/:antispoof \(false\)/){print $ifname."\n"}' $FWDIR/conf/objects_5_0.C|sort -u

UserParameter=allow_out_of_state_tcp,ls /tmp/is_mgmt &>/dev/null && perl -ne 'BEGIN{exit unless (-f $ARGV[0]); }if (/:fw_allow_out_of_state_tcp \(1\)/){$return = 1;exit}END{print $return || 0}' $FWDIR/conf/objects_5_0.C

UserParameter=http_usercheck,ls /tmp/is_mgmt &>/dev/null && perl -ne 'BEGIN{exit unless (-f $ARGV[0]); }if (/:main_url \("http:\/\//){s/^\s+//;print}' $FWDIR/conf/objects_5_0.C

UserParameter=drop_out_of_state_udp,ls /tmp/is_mgmt &>/dev/null && perl -ne 'BEGIN{exit unless (-f $ARGV[0]); }if (/:fw_drop_out_of_state_udp \(false\)/){print 0} if (/:fw_drop_out_of_state_udp \(true\)/){print 1}' $FWDIR/conf/objects_5_0.C

UserParameter=log_out_of_state_icmp,ls /tmp/is_mgmt &>/dev/null && perl -ne 'BEGIN{exit unless (-f $ARGV[0]); }if (/:fw_log_out_of_state_icmp \(0\)/){print 0} if (/:fw_log_out_of_state_icmp \(1\)/){print 1}' $FWDIR/conf/objects_5_0.C

UserParameter=log_out_of_state_tcp,ls /tmp/is_mgmt &>/dev/null && perl -ne 'BEGIN{exit unless (-f $ARGV[0]); }if (/:fw_log_out_of_state_tcp \(0\)/){print 0} if (/:fw_log_out_of_state_tcp \(1\)/){print 1}' $FWDIR/conf/objects_5_0.C

UserParameter=log_out_of_state_udp,ls /tmp/is_mgmt &>/dev/null && perl -ne 'BEGIN{exit unless (-f $ARGV[0]); }if (/:fw_log_out_of_state_udp \(0\)/){print 0} if (/:fw_log_out_of_state_udp \(1\)/){print 1}' $FWDIR/conf/objects_5_0.C

UserParameter=log_out_of_seq_tcp,ls /tmp/is_mgmt &>/dev/null && perl -ne 'BEGIN{exit unless (-f $ARGV[0]); }if (/:fw_log_out_of_seq_tcp \(false\)/){print 0} if (/:fw_log_out_of_seq_tcp \(true\)/){print 1}' $FWDIR/conf/objects_5_0.C

UserParameter=show_sysenv_all_status,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd(qq#clish -c "show sysenv all"#, "a", 600)){@split = split/\s{2,}/; print if $split[4] == 1}'

UserParameter=show_sysenv_all_value[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd(qq#clish -c "show sysenv all"#, "a", 600)){@split = split/\s{2,}/; if ($split[0] eq "$1"){print $split[1]}else{print 9999; exit} }'

UserParameter=cpstat_os_f_sensors_value[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f sensors", "a", 600)){s/\s{2,}//g;@split = split/\|/; if ($split[1] =~ /$1/i){print $split[2]}}'

UserParameter=cpstat_os_f_sensors_cpu1,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f sensors", "a", 600)){$print = 1 if /Temperature Sensors|Temperture Sensors/; $print = 0 if /^$/; next unless $print; s/\s{2,}//g;@split = split/\|/; if ($split[1] =~ m#cpu temp|cpu1|cpu 1|cpu0 temp|^temp#i){if ($split[2] && $split[2] > $temp){$temp = $split[2]}}}; if ($temp && $temp ne 0){print $temp};'

UserParameter=cpstat_os_f_sensors_cpu0,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f sensors", "a", 600)){$print = 1 if /Temperature Sensors|Temperture Sensors/; $print = 0 if /^$/; next unless $print; s/\s{2,}//g;@split = split/\|/; if ($split[1] =~ m#cpu 0|cpu0#i){if ($split[2] && $split[2] > $temp){$temp = $split[2]}}}; if ($temp && $temp ne 0){print $temp};'

UserParameter=cpstat_os_f_sensors_system,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f sensors", "a", 600)){$print = 1 if /Temperature Sensors|Temperture Sensors/; $print = 0 if /^$/; next unless $print; s/\s{2,}//g;@split = split/\|/; if ($split[1] =~ m#Sys Temp|m/b#i){if ($split[2] && $split[2] > $temp){$temp = $split[2]}}}; if ($temp && $temp ne 0){print $temp};'

UserParameter=cpstat_os_f_sensors_inlet,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f sensors", "a", 600)){$print = 1 if /Temperature Sensors|Temperture Sensors/; $print = 0 if /^$/; next unless $print; s/\s{2,}//g;@split = split/\|/; if ($split[1] =~ m#SyInet Ambient|Inlet Temp|Intake Temp|Inlet Ambient#i){if ($split[2] && $split[2] > $temp){$temp = $split[2]}}}; if ($temp && $temp ne 0){print $temp};'

UserParameter=cpstat_os_f_sensors_outlet,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f sensors", "a", 600)){$print = 1 if /Temperature Sensors|Temperture Sensors/; $print = 0 if /^$/; next unless $print; s/\s{2,}//g;@split = split/\|/; if ($split[1] =~ m#Exhaust Temp|Outlet Temp#i){if ($split[2] && $split[2] > $temp){$temp = $split[2]}}}; if ($temp && $temp ne 0){print $temp};'

UserParameter=cpstat_os_f_sensors_voltage1,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f sensors", "a", 600)){$print = 1 if /Voltage Sensors/; $print = 0 if /^$/; next unless $print; s/\s{2,}//g;@split = split/\|/; if ($split[1] =~ m#voltage 1#i){if ($split[2] && $split[2] > $temp){$temp = $split[2]}}}; if ($temp && $temp ne 0){print $temp};'

UserParameter=cpstat_os_f_sensors_voltage2,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os -f sensors", "a", 600)){$print = 1 if /Voltage Sensors/; $print = 0 if /^$/; next unless $print; s/\s{2,}//g;@split = split/\|/; if ($split[1] =~ m#voltage 2#i){if ($split[2] && $split[2] > $temp){$temp = $split[2]}}}; if ($temp && $temp ne 0){print $temp};'

UserParameter=cpstat_os_f_sensors_temp[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $i = 0;foreach (run_cmd("cpstat os -f sensors", "a", 600)){$print = 1 if /Temperature Sensors|Temperture Sensors/; $print = 0 if /^$/; next unless $print; s/\s{2,}//g;@split = next if /--/; @split = split/\|/; s/\|//g; next if $split[1] =~ /Name/; next if  /Sensors/; if ($split[2] && $i++ == $1){print $split[2]."\n"} };'

UserParameter=cpstat_os_f_sensors_fan[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $i = 0;foreach (run_cmd("cpstat os -f sensors", "a", 600)){$print = 1 if /Fan Speed Sensors/; $print = 0 if /^$/; next unless $print; s/\s{2,}//g;@split = next if /--/; @split = split/\|/; s/\|//g; next if $split[1] =~ /Name/; next if  /Sensors/; if ($split[2] && $i++ == $1){print $split[2]."\n"} };'

UserParameter=cpinfo_mhz,perl -ne 'next unless /^cpu MHz/; chomp; @split = split/\s+/; print $split[3]."\n"' /proc/cpuinfo |uniq

UserParameter=fwaccel_stat_templates[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 ; fwaccel stat", "a", 600)){next unless /Accept Templates/; if (/enabled/){print 1}else{print 9999}}'

UserParameter=fwaccel_stat_drop[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 ; fwaccel stat", "a", 600)){next unless /Drop Templates/; if (/enabled/){print 1}else{print 9999}}'

UserParameter=fwaccel_stat_nat[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 ; fwaccel stat", "a", 600)){next unless /NAT Templates/; if (/enabled/){print 1}else{print 9999}}'

UserParameter=fwaccel_stat_nmr[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 ; fwaccel stat", "a", 600)){next unless /NMR Templates/; if (/enabled/){print 1}else{print 9999}}'

#Alt av cpview er vekke i R80.10>
UserParameter=cpview_dump[*],source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null && echo -n 1 && ulimit -c 0 &>/dev/null; script -q /dev/null -c "cpview -p >/tmp/cpview_vs$1;exit;exit"

UserParameter=cpview_inbound_bits_total[*],ls /tmp/is_gw &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; perl -ne '$start = 1 if /.CPVIEW.Network.Traffic/; $start = 0 if /.CPVIEW.Network.Interfaces.Overview/; next unless $start; next unless /Inbound bits\/sec/; s/\|//g; s/\,//g; s/K/000/g; s/M/000000/g; @split = split/\s{2,}/; print $split[1]' /tmp/cpview_vs$1

UserParameter=cpview_inbound_bits_fw[*],ls /tmp/is_gw &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1  &>/dev/null ; perl -ne '$start = 1 if /.CPVIEW.Network.Traffic/; $start = 0 if /.CPVIEW.Network.Interfaces.Overview/; next unless $start; next unless /Inbound bits\/sec/; s/\|//g; s/\,//g; s/K/000/g; s/M/000000/g; @split = split/\s{2,}/; print $split[2]' /tmp/cpview_vs$1

UserParameter=cpview_inbound_bits_pxl[*],ls /tmp/is_gw &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1  &>/dev/null ; perl -ne '$start = 1 if /.CPVIEW.Network.Traffic/; $start = 0 if /.CPVIEW.Network.Interfaces.Overview/; next unless $start; next unless /Inbound bits\/sec/; s/\|//g; s/\,//g; s/K/000/g; s/M/000000/g; @split = split/\s{2,}/; print $split[3]' /tmp/cpview_vs$1

UserParameter=cpview_inbound_bits_sx[*],ls /tmp/is_gw &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1  &>/dev/null ; perl -ne '$start = 1 if /.CPVIEW.Network.Traffic/; $start = 0 if /.CPVIEW.Network.Interfaces.Overview/; next unless $start; next unless /Inbound bits\/sec/; s/\|//g; s/\,//g; s/K/000/g; s/M/000000/g; @split = split/\s{2,}/; print $split[4]' /tmp/cpview_vs$1

UserParameter=cpview_outbound_bits_total[*],ls /tmp/is_gw &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv  &>/dev/null $1 ; perl -ne '$start = 1 if /.CPVIEW.Network.Traffic/; $start = 0 if /.CPVIEW.Network.Interfaces.Overview/; next unless $start; next unless /Outbound bits\/sec/; s/\|//g; s/\,//g; s/K/000/g; s/M/000000/g; @split = split/\s{2,}/; print $split[1]' /tmp/cpview_vs$1

UserParameter=cpview_outbound_bits_fw[*],ls /tmp/is_gw &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1  &>/dev/null ; perl -ne '$start = 1 if /.CPVIEW.Network.Traffic/; $start = 0 if /.CPVIEW.Network.Interfaces.Overview/; next unless $start; next unless /Outbound bits\/sec/; s/\|//g; s/\,//g; s/K/000/g; s/M/000000/g; @split = split/\s{2,}/; print $split[2]' /tmp/cpview_vs$1

UserParameter=cpview_outbound_bits_pxl[*],ls /tmp/is_gw &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1  &>/dev/null ; perl -ne '$start = 1 if /.CPVIEW.Network.Traffic/; $start = 0 if /.CPVIEW.Network.Interfaces.Overview/; next unless $start; next unless /Outbound bits\/sec/; s/\|//g; s/\,//g; s/K/000/g; s/M/000000/g; @split = split/\s{2,}/; print $split[3]' /tmp/cpview_vs$1

UserParameter=cpview_outbound_bits_sx[*],ls /tmp/is_gw &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1  &>/dev/null ; perl -ne '$start = 1 if /.CPVIEW.Network.Traffic/; $start = 0 if /.CPVIEW.Network.Interfaces.Overview/; next unless $start; next unless /Outbound bits\/sec/; s/\|//g; s/\,//g; s/K/000/g; s/M/000000/g; @split = split/\s{2,}/; print $split[4]' /tmp/cpview_vs$1

UserParameter=cpview_connections_from_template[*],ls /tmp/is_gw &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1  &>/dev/null ; perl -ne 'BEGIN{exit if `fw stat` =~ /InitialPolicy/; exit if `cphaprob stat` =~ /local.*Standby/i} $start = 1 if /.CPVIEW.Network.Traffic/; $start = 0 if /.CPVIEW.Network.Interfaces.Overview/; next unless $start; next unless /Connections from templates/; s/%//g; @split = split/\s{2,}/; print $split[2]' /tmp/cpview_vs$1

UserParameter=cpview_first_packets_not_syn[*],ls /tmp/is_gw &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1  &>/dev/null ; perl -ne '$start = 1 if /.CPVIEW.Network.Traffic/; $start = 0 if /.CPVIEW.Network.Interfaces.Overview/; next unless $start; next unless /First packets not SYN/; s/\|//g; s/,//g; @split = split/\s{2,}/; print $split/tmp/cpview_vs$1

UserParameter=cpview_corexl[*],perl -e '$out = `grep "CoreXL Status" /tmp/cpview_vs$1`; if ($out =~ /off/){print 2}elsif($out =~/on/){print 1}else{print 9999}'

UserParameter=cpview_smt[*],perl -e '$out = `grep "SMT Status" /tmp/cpview_vs$1`; if ($out =~ /Disable"/){print 2}elsif($out =~/Enable/){print 1}else{print 9999}'

UserParameter=iostat_write_sec,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("iostat 1 2", "a", 600)) {$count += 1 if /Device:/; next unless $count == 2; @split = split/\s{1,}/; next unless $split[2] =~ /\./; $split[3] =~ s/\..*//; $count_blk += $split[3]; END{print ($count_blk*512)}}'

UserParameter=iostat_read_sec,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("iostat 1 2", "a", 600)) {$count += 1 if /Device:/; next unless $count == 2; @split = split/\s{1,}/; next unless $split[2] =~ /\./; $split[2] =~ s/\..*//; $count_blk += $split[2]; END{print ($count_blk*512)}}'

UserParameter=fw_tab_-t_connections[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; fw tab -t connections -s", "a", 600)){next unless /^localhost/; @split = split/\s{1,}/; exit unless $split[3]; print $split[3]}; '

UserParameter=fw_ctl_pstat_connections_limit[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl pstat", "a", 600)){next unless /Concurrent Connections:/; @split = split/\s{1,}/; exit unless $split[7]; $split[7] =~ s/\(|\)//g; exit if $split[7] == 900; print $split[7]}; '

UserParameter=fw_ctl_pstat_connections_percent[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl pstat", "a", 600)){next unless /Concurrent Connections:/; exit if /Unlimited/; @split = split/\s{1,}/; $split[3] =~ s/%//; exit unless $split[3] =~ /\d/; ; print $split[3]}; '

UserParameter=fw_ctl_pstat_connections_unlimited[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 ; fw ctl pstat", "a", 600)){next unless /Concurrent Connections:/; if (/Unlimited/){print 1}else{print 0}}'

UserParameter=secure_failed_count,perl -ne 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} BEGIN{$failed_count = 0; @split_date = split/\s{1,}/,run_cmd("date", "s", 600);} next unless /failed/i; @split = split/\s{1,}/; if ($split_date[2] == $split[1]){$failed_count++} END{print $failed_count}' /var/log/secure

UserParameter=db_snapshot_du,du -sb $FWDIR/conf/db_snapshot/

UserParameter=ping_gw_main_ip,perl -ne 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} BEGIN{exit unless (-f $ARGV[0]); } if (/:sic_name/){($sic_name) = /:sic_name \((.*)\)/;} if (/:ClassName \(interface/){($classname) = /:ClassName \((.*)\)/;} if (/:ipaddr/){($ipaddr) = /:ipaddr \((.*)\)/}; $ipaddr = "" if $ipaddr =~ /^0/;  if (/:officialname/){($name) = /:officialname \((.*)\)/;} if ($sic_name && $ipaddr && $name && $classname) {($gw_name) = $sic_name =~ /"cn=(.*).*,O/i; unless (run_cmd("ping -w 1 -c 1 $ipaddr", "s", 600) =~ /0% packet loss/){print "$gw_name $name $ipaddr\n";} $ipaddr = ""; $sic_name = ""} ' $FWDIR/conf/objects_5_0.C

UserParameter=time_in_sync,perl -e '($time_local) = `date "+%Y-%m-%d %H:%M:%S"` =~ /(.*)\d:\d\d/; ($time_url) = `curl -s "http://zabbix.kjartanohr.no/zabbix/date.php" \|\| curl_cli -s "http://zabbix.kjartanohr.no/zabbix/date.php"` =~ /(.*)\d:\d\d:/; print $time_url; print $time_local  '

UserParameter=checkpoint_online[*],ls /tmp/enabled_blades$1 &>/dev/null && source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; perl -e 'foreach ("http://cws.checkpoint.com/APPI/SystemStatus/type/short", "http://cws.checkpoint.com/URLF/SystemStatus/type/short", "http://cws.checkpoint.com/AntiVirus/SystemStatus/type/short", "http://cws.checkpoint.com/Malware/SystemStatus/type/short", "https://updates.checkpoint.com/", "http://dl3.checkpoint.com", "https://usercenter.checkpoint.com/usercenter/services/ProductCoverageService", "https://usercenter.checkpoint.com/usercenter/services/BladesManagerService", "http://resolver1.chkp.ctmail.com", "http://download.ctmail.com", "http://te.checkpoint.com", "http://teadv.checkpoint.com", "http://kav8.zonealarm.com/version.txt", "http://kav8.checkpoint.com", "http://avupdates.checkpoint.com/UrlList.txt", "http://sigcheck.checkpoint.com/Siglist2.txt", "http://secureupdates.checkpoint.com", "https://productcoverage.checkpoint.com/ProductCoverageService", "https://sc1.checkpoint.com/sc/images/checkmark.gif", "https://sc1.checkpoint.com/za/images/facetime/large_png/60342479_lrg.png", "https://sc1.checkpoint.com/za/images/facetime/large_png/60096017_lrg.png", "https://push.checkpoint.com", "http://downloads.checkpoint.com","http://te.checkpoint.com","http://gwevents.checkpoint.com","http://cws.checkpoint.com/Malware/SystemStatus/type/short","http://secureupdates.checkpoint.com/AMW/Version","http://sc1.checkpoint.com/EPcws/TCUrlsFormat.txt","http://kav8.zonealarm.com/v6/index/u1313g.xml","http://dnl-01.geo.kaspersky.com/index/u1313g.xml","https://rep.checkpoint.com/Phishing/status","https://rep-cws.checkpoint.com/file-rep/SystemStatus/type/short" ){system "source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; curl_cli -v -k \"$_\" &>/dev/null|| echo \"$_\"" }'

UserParameter=check_url[*],source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 5; DOWNLOAD:{$content = run_cmd(qq#source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; script -f /dev/null -c "time -p curl_cli --max-time 4 --retry 1 --retry-max-time 2 --connect-timeout 3 -v -k \"$2\""#, "s", 600); if ($content =~ m#HTTP/#){ ($time) = $content =~ /real (\d{1,}\.\d{1,})/; print int $time}else{print 9999};}}; print 9999 if $@;'

UserParameter=get_status_url[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} system "mkdir /tmp/zabbix/get_status_url/ &>/dev/null"; if (-f "/tmp/zabbix/get_status_url/url_VSID-$1.stop"){print 8888;exit} eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 5; $content = run_cmd(qq#source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; curl_cli -s --max-time 4 --retry 1 --connect-timeout 3 -I  -k "$2"#, "s", 600)}; if ($@){print 9999;exit} ($response) = $content =~ m#HTTP/.*? (\d*?) #; chomp $response; if ($response){print $response;}else{print 9999}'

UserParameter=cplic_months_left[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} %month = (Jan=>1,Feb=>2,Mar=>3,Apr=>4,May=>5,Jun=>6,Jul=>7,Aug=>8,Sept=>9,Oct=>10,Nov=>11,Dec=>12); @date_split = split/\s{1,}/,run_cmd("date", "s", 600); $nth_today_number = $month{$date_split[1]}; $date_year = $date_split[5]; foreach (run_cmd("cplic print", "a", 60000)){next unless /^\d/; s/\|//g; @split_cplic = split/\s{1,}/;  ($cplic_day,$cplic_month,$cplic_year) = $split_cplic[2] =~ /(\d{1,2})(.{3})(\d{4})/; $cplic_month_number = $month{$cplic_month}; next if $date_year > $cplic_year; $i++;  if ($date_year == $cplic_year){ $months_left[$i] = ($cplic_month_number - $month_today_number)} if ($cplic_year > $date_year){ $months_left[$i] = ((12 - $month_today_number) + $cplic_month );  } };  $month_high = 0;  foreach $month (@months_left) {$month_high = $month if $month > $month_high} print $month_high'

UserParameter=cplic_support_months_left[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} %month = (Jan=>1,Feb=>2,Mar=>3,Apr=>4,May=>5,Jun=>6,Jul=>7,Aug=>8,Sept=>9,Oct=>10,Nov=>11,Dec=>12); @date_split = split/\s{1,}/,run_cmd("date", "s", 600); $month_today_number = $month{$date_split[1]}; $date_year = $date_split[5]; foreach (run_cmd("cplic print", "a", 600)){next unless /CPCES/; next unless /^\d/; s/\|//g; @split_cplic = split/\s{1,}/;  ($cplic_day,$cplic_month,$cplic_year) = $split_cplic[2] =~ /(\d{1,2})(.{3})(\d{4})/; $cplic_month_number = $month{$cplic_month}; next if $date_year > $cplic_year; $i++;  if ($date_year == $cplic_year){ $months_left[$i] = ($cplic_month_number - $month_today_number)} if ($cplic_year > $date_year){ $months_left[$i] = ((12 - $month_today_number) + $cplic_month );  } };  $month_high = 0;  foreach $month (@months_left) {$month_high = $month if $month > $month_high} print $month_high'

UserParameter=exists[*],perl -e 'if (-f "$ARGV[0]" or -d "$ARGV[0]"){print 1}else{print 0}' $1

UserParameter=cpstat_blades_-f_fw_accepted[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 ; cpstat blades -f fw", "a", 600)){next unless /Packets accepted/; ($counter) = /:\s{1,}(\d*)/; print $counter}'

UserParameter=cpstat_blades_-f_fw_dropped[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 ; cpstat blades -f fw", "a", 600)){next unless /Packets dropped/; ($counter) = /:\s{1,}(\d*)/; print $counter}'

UserParameter=zabbix_config_uptodate,perl -e '%month = (Jan=>1,Feb=>2,Mar=>3,Apr=>4,May=>5,Jun=>6,Jul=>7,Aug=>8,Sep=>9,Oct=>10,Nov=>11,Dec=>12); foreach (1 .. 10){$html = `curl_cli --connect-timeout 2 -s  -I http://zabbix.kjartanohr.no/zabbix/zabbix_agentd.conf`; last if $html =~ /200 OK/} ($url_day,$url_month_name) = $html =~ /Last-Modified: ..., (\d{1,2}) (...) \d{4}/; $url_month = $month{$url_month_name}; ($file_month,$file_day) = `stat /usr/share/zabbix/conf/zabbix_agentd.conf` =~ /Modify: \d{4}-(\d{1,2})-(\d{1,2})/; unless ($url_day && $url_month){print 3;exit} if ($url_day == $file_day && $url_month == $file_month){print 0}else{print 1}'

UserParameter=ping_routes[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; ip route", "a", 600)){@split = split/\s{1,}/; next unless $split[2] =~ /^\d/; $gw{$split[2]} = 1;} foreach (%gw){next if $_ eq 1; $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; ping -w 1 -c 1 $_", "s", 60); print "$_\n" if $out =~ /100% packet loss/;}'

#UserParameter=te_engine_uptodate[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_te"){print 8888; exit} $html = `curl_cli --connect-timeout 5 -s -k "https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doGoviewsolutiondetails=&solutionid=sk95235"`; ($version_online) = $html =~ /Engine:\s{1,}(\d{1,}\.\d{1,})/; unless ($version_online){print 3;exit}; unless ($ARGV[0]){print 5;exit} $version_local = `cat $ARGV[0]`; unless ($version_local){print 4;exit} if ($version_online == $version_local){print 1}else{print 9999} ' `source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null && find $TE_UPDATES_HOME/ -name te_ver.ini  2>/dev/null|grep -v teDefaultPack`

UserParameter=te_engine_uptodate[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/enabled_blades_vs$1_te"){print 8888; exit}  $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; cpstat threat-emulation -f update_status", "s", 600); if ($out =~ /failed/){print 1}else{print 2}'

UserParameter=ping_adlog_dc[*],grep identityServer /tmp/enabled_blades_vs$1 &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; adlog a dc", "s", 6000)){@split = split/\s{1,}/; next unless $split[1] =~ /^\d/; $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; ping -w 1 -c 1 $split[1]", "s", 600); print "$split[1]\n" if $out =~ /100% packet loss/;}'

UserParameter=cpu_throttling,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $error = 0; foreach (run_cmd(qq#find /proc/acpi/processor/ -name throttling -exec grep "\*" {} \\; 2>/dev/null#, "a", 600)){next if /00/; $error = 1}; print $error;'

UserParameter=discovery_interface[*],perl -e '$first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (`ls /sys/class/net/`){chomp; next if /^lo/;next if `cat /sys/class/net/$_/statistics/tx_packets 2>/dev/null` < 1; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#NAME}\":\"$_\"}";} print "\n\t]"; print "}\n";'

UserParameter=interface_speed[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("ethtool $1", "s", 600); if ($out =~ /No data available/){print 9999; exit}; ($speed) = $out =~ /Speed:\s{1,}(\d{2,})/; if ($speed){print $speed};'

UserParameter=interface_auto-negotiation[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("ethtool $1", "s", 600); if ($out =~ /No data available/){print 9999; exit} ;if ($out =~ /Advertised auto-negotiation: Yes/){print 0}else{print 1};'

UserParameter=interface_duplex_full[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("ethtool $1", "s", 600); if ($out =~ /No data available/){print 9999; exit}; if ($out =~ /Duplex: Full/){print 0}else{print 1};'

UserParameter=interface_link_detected[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("ethtool $1", "s", 600); if ($out =~ /No data available/){print 9999; exit}; if ($out =~ /Link detected: yes/){print 0}else{print 1};'

UserParameter=discovery_interface_vsx[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach $vsid (0 .. 20) {foreach $ipa (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid 2>/dev/null ; ip a", "a", 600)){chomp; if ($ipa =~ /Context is set to/){($vs_name) = $ipa =~ /Context is set to Virtual Device (.*?)\s/} ($int_name) = $ipa =~ /^\d{1,}:\s{1,}(.*):\s/; next if $int_name =~ /^lo/; next unless $int_name; $int_name =~ s/@.*//;next if `cat /sys/class/net/$int_name/statistics/tx_packets` < 1;  if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#VSNAME}\":\"$vs_name\", \t\t\"{#IFNAME}\":\"$int_name\"}";}}print "\n\t]}\n";'

#Legg til sjekk om filene er tilgjengelig og inneholder data
UserParameter=interface_rx[*],cat /sys/class/net/$1/statistics/rx_bytes 2>/dev/null || echo 0 

UserParameter=interface_tx[*],cat /sys/class/net/$1/statistics/tx_bytes 2>/dev/null || echo 0

UserParameter=interface_collisions[*],cat /sys/class/net/$1/statistics/collisions 2>/dev/null || echo 9999
UserParameter=interface_rx_bytes[*],cat /sys/class/net/$1/statistics/rx_bytes 2>/dev/null || echo 9999
UserParameter=interface_rx_crc_errors[*],cat /sys/class/net/$1/statistics/rx_crc_errors 2>/dev/null || echo 9999
UserParameter=interface_rx_errors[*],cat /sys/class/net/$1/statistics/rx_errors 2>/dev/null || echo 9999
UserParameter=interface_rx_frame_errors[*],cat /sys/class/net/$1/statistics/rx_frame_errors 2>/dev/null || echo 9999
UserParameter=interface_rx_missed_errors[*],cat /sys/class/net/$1/statistics/rx_missed_errors 2>/dev/null || echo 9999
UserParameter=interface_rx_packets[*],cat /sys/class/net/$1/statistics/rx_packets 2>/dev/null || echo 9999
UserParameter=interface_tx_bytes[*],cat /sys/class/net/$1/statistics/tx_bytes 2>/dev/null || echo 9999
UserParameter=interface_tx_compressed[*],cat /sys/class/net/$1/statistics/tx_compressed 2>/dev/null || echo 9999
UserParameter=interface_tx_errors[*],cat /sys/class/net/$1/statistics/tx_errors 2>/dev/null || echo 9999
UserParameter=interface_tx_heartbeat_errors[*],cat /sys/class/net/$1/statistics/tx_heartbeat_errors 2>/dev/null || echo 9999
UserParameter=interface_tx_window_errors[*],cat /sys/class/net/$1/statistics/tx_window_errors 2>/dev/null || echo 9999
UserParameter=interface_multicast[*],cat /sys/class/net/$1/statistics/multicast 2>/dev/null || echo 9999
UserParameter=interface_rx_compressed[*],cat /sys/class/net/$1/statistics/rx_compressed 2>/dev/null || echo 9999
UserParameter=interface_rx_dropped[*],cat /sys/class/net/$1/statistics/rx_dropped 2>/dev/null || echo 9999
UserParameter=interface_rx_fifo_errors[*],cat /sys/class/net/$1/statistics/rx_fifo_errors 2>/dev/null || echo 9999
UserParameter=interface_rx_length_errors[*],cat /sys/class/net/$1/statistics/rx_length_errors 2>/dev/null || echo 9999
UserParameter=interface_rx_over_errors[*],cat /sys/class/net/$1/statistics/rx_over_errors 2>/dev/null || echo 9999
UserParameter=interface_tx_aborted_errors[*],cat /sys/class/net/$1/statistics/tx_aborted_errors 2>/dev/null || echo 9999
UserParameter=interface_tx_carrier_errors[*],cat /sys/class/net/$1/statistics/tx_carrier_errors 2>/dev/null || echo 9999
UserParameter=interface_tx_dropped[*],cat /sys/class/net/$1/statistics/tx_dropped 2>/dev/null || echo 9999
UserParameter=interface_tx_fifo_errors[*],cat /sys/class/net/$1/statistics/tx_fifo_errors 2>/dev/null || echo 9999
UserParameter=interface_tx_packets[*],cat /sys/class/net/$1/statistics/tx_packets 2>/dev/null || echo 9999

UserParameter=interface_state[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd(qq#clish -c "show interface $1 all"#, "s", 600); if ($out =~ /Invalid Interface name|Failed to find/){print 1}elsif ($out =~ /state.*on/){print 2}elsif ($out =~ /state.*off/){print 3}'

#UserParameter=interface_mtu[*],perl -e '$out = `clish -c "show interface $1 mtu"`; if ($out =~ /Invalid Interface name/){print 1} ($mtu) = $out =~ /mtu (.*)/; unless ($mtu){print 2;exit}; print $mtu'
UserParameter=interface_mtu[*],cat /sys/class/net/$1/mtu 2>/dev/null || echo 0

#UserParameter=interface_monitor[*],perl -e '$out = `clish -c "show interface $1 monitor-mode"`; if ($out =~ /Invalid Interface name/i){print 1}elsif ($out =~ /monitor mode on/i){print 2}elsif ($out =~ /monitor mode off/i){print 3}else{print 4};'
UserParameter=interface_monitor[*],cat /sys/class/net/$1/monitor_mode 2>/dev/null || echo 0

UserParameter=interface_comment[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd(qq#clish -c "show interface $1 comments"#, "s", 6000); if ($out =~ /Invalid Interface name/i){print 1} ($comment) = $out =~ /comments\s{0,}(.*)/; $comment =~ s/\{|\}//g; print $comment'

UserParameter=interface_error[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd(qq#clish -c "show interface $1 mtu"#, "s", 6000); if ($out =~ /Invalid Interface name/){print 1} ($mtu) = $out =~ /mtu (.*)/; unless ($mtu){print 2;exit}; print $mtu'

UserParameter=vsx_discover[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} ($search) = run_cmd("cat /etc/resolv.conf", "s", 600) =~ /search\s{1,}(.*?)\s{1,}/; $search = "Unknown" unless $search; $first = 0; print "{\n"; print "\t\"data\":[\n\n"; if ($first == 0){ $hostname = run_cmd("hostname", "s", 6000); chomp $hostname; print "\n{\t\t\"{#VSNAME}\":\"$hostname\", \t\t\"{#VSID}\":\"0\", \t\t\"{#HOST}\":\"$hostname\", \t\t\"{#SEARCH}\":\"$search\"}"} foreach (run_cmd("vsx stat -v", "a", 600)){s/^\s*`?//; next unless /^\d/; @split = split/\s{1,}/;if ($split[2] eq "S"){($vsname) = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $split[0]", "s", 6000) =~ /_(.*?) /;  $first++; print ",\n{\t\t\"{#VSNAME}\":\"$vsname\", \t\t\"{#VSID}\":\"$split[0]\", \t\t\"{#HOST}\":\"$hostname\", \t\t\"{#SEARCH}\":\"$search\"}";}}print "\n\t]}\n";'


UserParameter=installed_version,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} ($version,$build) = run_cmd("fw ver", "s", 6000) =~ /R(.*?) - Build (.*)/; if ($version){print $version}else{print 1}'

UserParameter=installed_build,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} ($version,$build) = run_cmd("fw ver", "s", 6000) =~/R(.*?) - Build (.*)/; if ($build){print $build}else{print 1}'

UserParameter=discovery_bond[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("find /proc/net/bonding/", "a", 600)){chomp; next if -d $_; $bond_name = $_; $bond_name =~ s#.*/##; foreach (`cat $_`){ next unless /Slave Interface/; chomp; ($interface) = /Slave Interface:\s{1,}(.*)/; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#NAME}\":\"$bond_name.$interface\"}";}} print "\n\t]"; print "}\n";'

UserParameter=bond_failure[*],perl -e '($bond,$interface) = split/\./,$1; foreach (`cat /proc/net/bonding/$bond`){ $print = 1 if /$interface/; next unless $print; exit if /^$/; next unless /Link Failure Count/; ($failure) = /Link Failure Count:\s{1,}(.*)/; print $failure }'

UserParameter=ping_sync,ls /tmp/is_gw_cluster &>/dev/null &&perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cphaprob stat", "a", 600)){next unless /^\d/; next if /local/i; @split = split/\s{1,}/; $out = run_cmd("ping -w 1 -c 1 $split[1]", "s", 600); if ($out =~ /100% packet loss/){$failed = 1}} if ($failed){print 1}elsif (!$failed){print 2}else{print 3}'

UserParameter=directory_size[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $options = "bsx"; $options = "bsxS" if "$3"; eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 25; @split = split/\s{1,}/,run_cmd("du -$options $ARGV[0]", "s", 600);}; if ($@ || !$split[0]){print 9999}else{print $split[0]}' `source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; echo $2`

UserParameter=directory_exists[*],perl -e 'if (-d "$1"){print 1}else{print 2}'

UserParameter=file_exists[*],perl -e 'if (-f "$1"){print 1}else{print 2}'

UserParameter=perl_installed,perl -e 'print 1'

UserParameter=vpn_s2s[*],ls /tmp/is_gw &>/dev/null && grep vpn /tmp/enabled_blades_vs0 &>/dev/null ; source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("echo "show tunnels IKE all"|vpn shell", "a", 600)){next unless /Peer/; next if /user/; @split = split /\s{1,}/; system "echo \"$split[3] $split[1]\" >>/tmp/vpn_ike_vs$1.now"} system "diff /tmp/vpn_ike_vs$1.now /tmp/vpn_ike_vs$1.old 2>/dev/null"; unlink "/tmp/vpn_ike_vs$1.old"; rename "/tmp/vpn_ike_vs$1.now","/tmp/vpn_ike_vs$1.old";'

UserParameter=mail_spool_count,ls /tmp/is_gw &>/dev/null ; find /var/log/spool/ 2>/dev/null|wc -l

UserParameter=hosts_localhost,grep localhost /etc/hosts 2>/dev/null|wc -l

UserParameter=login_secure[*],perl -e '$last_time = `cat /tmp/secure_last$1 2>/dev/null`; chomp $last_time; foreach (`cat /var/log/secure`){next unless /Accepted password/;@split = split/\s{1,}/;  $last = $split[2];  if ($split[2] eq $last_time){$print = 1;next}; next unless $print; next if $split[9] =~ /kjartan/i; print "$split[9] $split[11]\n"}; system "echo \"$last\" >/tmp/secure_last$1"'

UserParameter=login_secure_failed[*],perl -e '$last_time = `cat /tmp/secure_failed_last$1 2>/dev/null`; chomp $last_time; foreach (`cat /var/log/secure.4 /var/log/secure.3 /var/log/secure.2 /var/log/secure.1 /var/log/secure 2>/dev/null`){@split = split/\s{1,}/;  $last = "$split[0] $split[1] $split[2]";   if ($last eq $last_time){$print = 1;next}; next unless $print; next unless /Failed/; s/invalid user//;($ip) = /from (.*) port/; @split = split/\s{1,}/; print "$split[9] $ip\n"};  system "echo \"$last\" >/tmp/secure_failed_last$1"'

UserParameter=smartlog_query_time,ls /tmp/is_mgmt &>/dev/null && perl -ne 'next unless /Query duration: \d{1,} Seconds/;($time) = /Query duration: (\d{1,}) Seconds/; $counter++; $time_total += $time; END{if ($time_total and $counter) { print int ($time_total/$counter)} else {print 9999}}' $RTDIR/log/smartview.log

UserParameter=discovery_process,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("ps xawwT", "a", 600)){$ok = 0; s/^\s{1,}//; chomp; @split = split/\s{1,}/; next if /sqlite3|mount|sicren|rad_admin|tftp|pkxld|cleanup|netstat|tr|tar |restore|dump|ep_rotatelogs|esc_db_complete|ftp|fwaccel|fwm ver|fw6|fw ctl|fw stat|fwd -n|fw_full vsx|vsx stat|head|IdlePinger|keepup2date8|DDRService|dbget|curl|cp_logrotate|cp_file_convert|cpview|cpstat|cprid|cpmq|cphamcset|cpdiag|cat|auditd|nimbus|sort|sim |uniq|sed|head|fwaccel|cpha|keepup2|acapd|tail |mpstat|script |curl|cp_file_convertd|cprid|avi_del_tmp_fil|acpid|numbus|ping |cpstat|awk|perl|wmic|fw ctl|fw |grep|sh |bash|funcchain|^Tasks|zabbix|\[.*\]|tty| ps |sleep |clis|sshd|COMMAND|snmp|script|dig/i; @stat = split/\s{1,}/,`cat /proc/$split[0]/stat 2>/dev/null`; next unless $stat[1]; $stat[1] =~ s/\(|\)//g; undef $process_name; $process_name = "$stat[1] "; $process_name .= "$split[$_] " foreach 4..6 ; $process{$process_name} = 1; } foreach (%process){next if $_ eq 1; s/\s{1,}$//g;if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#NAME}\":\"$_\"}";} print "\n\t]"; print "}\n";'

UserParameter=connect_mgmt[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $cert = `cat $ARGV[0]`; ($url) = $cert =~ m#(http://.*\.crl)#; $data = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; curl -v -k --connect-timeout 5 $url", "s", 600);  if ($data =~ /200 OK/){print 1}elsif ($data =~ /Couldn.t resolve host/){print 3}else{print 2}' $CPDIR/conf/sic_cert.p12

UserParameter=grep[*],perl -ne 'BEGIN{$found = 1} $found = 2 if m!$1!;  END{print $found;}' $2

UserParameter=grep_count[*],perl -ne 'unless (-f "$ARGV[0]"){print 9999; exit}; next unless /$ARGV[1]/; $c++; END{print $c} ' "$1" "$2"

#UserParameter=ips_aggressive_aging[*],ls /tmp/enabled_blades_vs$1_ips  &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} print 2;exit if (grep /Aggressive Aging.*not active /, run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; fw ctl pstat", "a", 600)){print 2}else{print 1}'
UserParameter=ips_aggressive_aging[*],ls /tmp/enabled_blades_vs$1_ips  &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} if (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; fw ctl pstat", "s", 600) =~ /Aggressive Aging.*not active/) {print 2}else{print 1}'

#UserParameter=discovery_routes[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n";  $hostname = run_cmd("hostname", "s", 600); chomp $hostname; foreach (run_cmd("vsx stat -v", "a", 6000)){s/^\s*`?//; next unless /^\d/; @split = split/\s{1,}/;next unless $split[2] eq "S"; if ($split[2] eq "S"){undef %gw;  ($vsname) = `source /etc/profile.d/vsenv.sh; vsenv $split[0] 2>/dev/null` =~ /_(.*?) /;} $vsname = $hostname if $split[0] == 0; next unless $vsname; $vsid = $split[0]; foreach (`source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null && ip route`){@split = split/\s{1,}/; next unless $split[2] =~ /^\d/; $gw{$split[2]} = 1;} foreach $gw (%gw){next if $gw eq 1; ; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#VSNAME}\":\"$vsname\", \t\t\"{#VSID}\":\"$vsid\",\t\t\"{#IP}\":\"$gw\"}";}} print "\n\t]"; print "}\n";'
UserParameter=discovery_routes[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n";  $hostname = run_cmd("hostname", "s", 600); chomp $hostname; my @vs0 = ("0 | S"); foreach (@vs0, run_cmd("vsx stat -v", "a", 6000)){s/^\s*`?//; next unless /^\d/; @split = split/\s{1,}/;next unless $split[2] eq "S"; if ($split[2] eq "S"){undef %gw;  ($vsname) = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $split[0] 2>/dev/null", "s", 60000) =~ /_(.*?) /;} $vsname = $hostname if $split[0] == 0; next unless $vsname; $vsid = $split[0]; foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null && ip route", "a", 600)){@split = split/\s{1,}/; next unless $split[2] =~ /^\d/; $gw{$split[2]} = 1;} foreach $gw (%gw){next if $gw eq 1; ; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#VSNAME}\":\"$vsname\", \t\t\"{#VSID}\":\"$vsid\",\t\t\"{#IP}\":\"$gw\"}";}} print "\n\t]"; print "}\n";'

UserParameter=zabbix_process_count,ps xa|grep zabb|wc -l

UserParameter=default_gw_missing[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} if (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; ip route", "s", 600) =~ /default via/){print 1}else{print 2}'

UserParameter=isp_1,perl -e '$counter = 0; foreach (`cpstat fw`){next unless /ISP-1/; next if /OK/; $counter++;} print $counter'

UserParameter=isp_2,perl -e '$counter = 0; foreach (`cpstat fw`){next unless /ISP-2/; next if /OK/; $counter++;} print $counter'

UserParameter=zabbix_exec_min,perl -e 'foreach (`cat /tmp/zabbix_agentd.log`){next unless /EXECUTE_STR/; ($min) = /\d{1,}:\d{1,}:\d\d(\d\d)/; next unless $min; next unless $min =~ /^\d\d$/;  if ($last_min < $min){$last_min = $min;}; } foreach (`cat /tmp/zabbix_agentd.log`){next unless /EXECUTE_STR/; ($min) = /\d{1,}:\d{1,}:\d\d(\d\d)/;  unless (($last_min -1) eq $min){next;} $counter++; } print $counter; '

UserParameter=postgresql_connect_db,ls /tmp/is_mgmt &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} if (run_cmd("psql_client -c "\\conninfo" cpm postgres", "s", 600) =~ /You are connected/){print 1}else{print 2}'

UserParameter=process_count[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $count = 0; foreach (run_cmd("ps xaeww", "a", 600)){next if /perl/; next unless m#$1#i; $count++;} print $count;'

UserParameter=process_count_discovery[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $search = "$1"; $search =~ s/^.*? //; $count = 0; foreach (run_cmd("ps xaeww", "a", 600)){next if /perl/; next unless m#$search#; $count++;} print $count;'

#UserParameter=discovery_pdp_dc[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless run_cmd("source /etc/profile.d/vsenv.sh; vsenv $split[0] &>/dev/null && enabled_blades", "s", 6000) =~ /identityServer/; $first = 0; print "{\n"; print "\t\"data\":[\n\n"; my @vs0 = ("0 | S"); foreach (@vs0, run_cmd("vsx stat -v", "a", 600)){s/^\s*`?//; next unless /^\d/; @split = split/\s{1,}/;if ($split[2] eq "S"){($vsname) = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $split[0]", "s", 600) =~ /_(.*?) /; foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $split[0] 2>/dev/null ; adlog a dc", "a", 600)){chomp; if (/Context is/){($vs_name) = /Context is set to Virtual Device .*?_(.*?)\s/} next if /=/; @split_pdp = split/\s{1,}/; next unless $split_pdp[1] =~ /^\d/; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#VSID}\":\"$split[0]\", \t\t\"{#VSNAME}\":\"$vsname\", \t\t\"{#IP}\":\"$split_pdp[1]\"}";}}}print "\n\t]}\n";'
UserParameter=discovery_pdp_dc[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_enabled_ia("vsid" => $1); exit unless is_ha_active("vsid" => $1); $first = 0; print "{\n"; print "\t\"data\":[\n\n"; my @vs0 = ("0 | S"); foreach (@vs0, run_cmd("vsx stat -v", "a", 600)){s/^\s*`?//; next unless /^\d/; @split = split/\s{1,}/;if ($split[2] eq "S"){($vsname) = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $split[0]", "s", 600) =~ /_(.*?) /; foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $split[0] 2>/dev/null ; adlog a dc", "a", 600)){chomp; if (/Context is/){($vs_name) = /Context is set to Virtual Device .*?_(.*?)\s/} next if /=/; @split_pdp = split/\s{1,}/; next unless $split_pdp[1] =~ /^\d/; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#VSID}\":\"$split[0]\", \t\t\"{#VSNAME}\":\"$vsname\", \t\t\"{#IP}\":\"$split_pdp[1]\"}";}}}print "\n\t]}\n";'

UserParameter=pdp_dc_events[*], perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_enabled_ia("vsid" => $1); exit unless is_ha_active("vsid" => $1); foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; adlog a dc", "a", 600)){chomp; next if /=/; @split = split/\s{1,}/; next unless $split[1] eq "$2"; print $split[2]}'

#UserParameter=mgmt_cli_ips_stat_update-available,ls /tmp/is_mgmt &>/dev/null && perl -e '$ips_stat = `mgmt_cli show ips-status -r true`; if ($ips_stat =~ /update-available: true/){print 1}elsif ($ips_stat =~ /update-available: false/){print 2}elsif ($ips_stat =~ /generic_error/){print 3}else{print 9999}'
UserParameter=mgmt_cli_ips_stat_update-available,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); my $ips_stat = mgmt_cli("command" => "show ips-status"); if ($ips_stat =~ /update-available: true/){print 1}elsif ($ips_stat =~ /update-available: false/){print 2}elsif ($ips_stat =~ /generic_error/){print 3}else{print 9999}'

UserParameter=mgmt_cli_ips_stat_schedule,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); my $out = mgmt_cli("command" => "show ips-update-schedule"); if ($out =~ /enabled: true/){print 1}elsif ($out =~ /enabled: false/){print 2}elsif ($out =~ /generic_error/){print 3}else{print 9999}'

#UserParameter=mgmt_cli_ips_stat_schedule,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); my $out = mgmt_cli("command" => "show unused-objects offset 0 limit 1 details-level standard"); if ($out =~ /enabled: true/){print 1}elsif ($out =~ /enabled: false/){print 2}elsif ($out =~ /generic_error/){print 3}else{print 9999}'

#UserParameter=mgmt_cli_unused_objects,ls /tmp/is_mgmt &>/dev/null && mgmt_cli show unused-objects offset 0 limit 1 details-level "standard" -r true|grep total|awk  '{print $2}'

UserParameter=mgmt_cli_unused_objects, perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); my $out = run_cmd({"cmd" => "mgmt_cli show unused-objects offset 0 limit 1 details-level standard --unsafe-auto-accept true --conn-timeout 60 --debug on --format text --ignore-errors false --management 127.0.0.1 --root true --port 443"});  my ($total) = $out =~ /total: (.*)/; if (defined $total){print $total}else{print 9999}'

#UserParameter=mgmt_cli_objects_count,ls /tmp/is_mgmt &>/dev/null && perl -e '$out = `mgmt_cli show objects limit 1 -r true`; ($total) = $out =~ /total: (\d{1,})/; print $total'
UserParameter=mgmt_cli_objects_count, perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); my $out = run_cmd({"cmd" => "mgmt_cli show objects offset 0 limit 1 details-level standard --unsafe-auto-accept true --conn-timeout 60 --debug on --format text --ignore-errors false --management 127.0.0.1 --root true --port 443"});  my ($total) = $out =~ /total: (.*)/; if (defined $total){print $total}else{print 9999}'

#UserParameter=mgmt_cli_sessions,ls /tmp/is_mgmt &>/dev/null && perl -e '$out = `mgmt_cli show sessions -r true`; ($total) = $out =~ /total: (\d{1,})/; print $total'
UserParameter=mgmt_cli_sessions, perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); my $out = run_cmd({"cmd" => "mgmt_cli show sessions offset 0 limit 1 details-level standard --unsafe-auto-accept true --conn-timeout 60 --debug on --format text --ignore-errors false --management 127.0.0.1 --root true --port 443"});  my ($total) = $out =~ /total: (.*)/; if (defined $total){print $total}else{print 9999}'

#UserParameter=cpstat_appi_sub[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_appi"){print 8888;exit} if (grep /valid|up-to-date|new/,`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat appi -f subscription_status`){print 1}else{print 2}'
UserParameter=cpstat_appi_sub[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw() and is_enabled_appi(); my $out = run_cmd({"cmd" => "vsenv $1 ; cpstat appi -f subscription_status"}); if ($out =~ /valid|up-to-date|new/){print 1}else{print 2}'

#UserParameter=cpstat_urlf_sub[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_urlf"){print 8888;exit} if (grep /up-to-date|new|valid/,`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat urlf -f subscription_status`){print 1}else{print 2}'
UserParameter=cpstat_urlf_sub[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw() and is_enabled_urlf(); my $out = run_cmd({"cmd" => "vsenv $1 ; cpstat urlf -f subscription_status"}); if ($out =~ /valid|up-to-date|new/){print 1}else{print 2}'

#UserParameter=cpstat_malw_sub[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_av"){print 8888;exit} if (grep /valid|up-to-date|new/,`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat antimalware -f subscription_status`){print 1}else{print 2}'
UserParameter=cpstat_malw_sub[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw() and is_enabled_av(); my $out = run_cmd({"cmd" => "vsenv $1 ; cpstat antimalware -f subscription_status"}); if ($out =~ /valid|up-to-date|new/){print 1}else{print 2}'

#UserParameter=cpstat_te_sub[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_ThreatEmulation"){print 8888;exit} if (grep /valid|up-to-date|new/,`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat threat-emulation -f contract`){print 1}else{print 2}'
UserParameter=cpstat_te_sub[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw() and is_enabled_te(); my $out = run_cmd({"cmd" => "vsenv $1 ; cpstat threat-emulation -f contract"}); if ($out =~ /valid|up-to-date|new/){print 1}else{print 2}'

#UserParameter=cpstat_ia_ok[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_ia"){print 8888;exit} if (grep /OK/,`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat identityServer`){print 1}else{print 2}'
UserParameter=cpstat_ia_ok[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw() and is_enabled_ia(); my $out = run_cmd({"cmd" => "vsenv $1 ; cpstat identityServer"}); if ($out =~ /OK/){print 1}else{print 2}'

#UserParameter=cpstat_antim_updated[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_av"){print 8888;exit} if (grep /up-to-date|new/,`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat antimalware -f update_status`){print 1}else{print 2}'
UserParameter=cpstat_antim_updated[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw() and is_enabled_av(); my $out = run_cmd({"cmd" => "vsenv $1 ; cpstat antimalware -f update_status"}); if ($out =~ /up-to-date|new/){print 1}else{print 2}'

#UserParameter=cpstat_urlf_updated[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_urlf"){print 8888;exit} if (grep /up-to-date|new/,`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat urlf -f update_status`){print 1}else{print 2}'
UserParameter=cpstat_urlf_updated[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw() and is_enabled_urlf(); my $out = run_cmd({"cmd" => "vsenv $1 ; cpstat urlf -f update_status"}); if ($out =~ /up-to-date|new/){print 1}else{print 2}'

#UserParameter=cpstat_te_updated[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_te"){print 8888;exit} if (grep /valid|up-to-date|new/,`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat threat-emulation -f update_status`){print 1}else{print 2}'
UserParameter=cpstat_te_updated[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw() and is_enabled_te(); my $out = run_cmd({"cmd" => "vsenv $1 ; cpstat threat-emulation -f update_status"}); if ($out =~ /valid|up-to-date|new/){print 1}else{print 2}'

#UserParameter=cpstat_appi_updated[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_appi"){print 8888;exit} if (grep /valid|up-to-date|new/,`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat appi -f update_status`){print 1}else{print 2}'
UserParameter=cpstat_appi_updated[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw() and is_enabled_appi(); my $out = run_cmd({"cmd" => "vsenv $1 ; cpstat appi -f update_status"}); if ($out =~ /valid|up-to-date|new/){print 1}else{print 2}'

#UserParameter=cpstat_mg_status,ls /tmp/is_mgmt &>/dev/null && perl -e 'if (grep /OK/,`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpstat mg`){print 1}else{print 2}'
UserParameter=cpstat_mg_status,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); my $out = run_cmd({"cmd" => "vsenv $1 ; cpstat mg"}); if ($out =~ /OK/){print 1}else{print 2}'

UserParameter=cpstat_mg_log_rate,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); foreach (run_cmd("cpstat mg -f log_server","a")){next unless /Log Receive Rate/; ($rate) = /Log Receive Rate:\s{0,}(\d{1,})/;print $rate}'

UserParameter=cpstat_mg_log_disconnected, perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); foreach (run_cmd("cpstat mg -f log_server","a")){next unless /Disconnected/; @split = split/\|/;  print $split[1]}'

#UserParameter=cpstat_log_disconnected,perl -e 'foreach (`cpstat ls -f logging 2>&1 || cpstat mg -f log_server 2>&1 `){next unless /Disconnected/;; s/\s{1,}//g; @split = split/\|/; print "$split[1] "}'
UserParameter=cpstat_log_disconnected, perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); foreach (run_cmd("cpstat mg -f log_server","a")){next unless /Disconnected/;; s/\s{1,}//g; @split = split/\|/; print "$split[1] "}'

#UserParameter=cpstat_log_disconnected_vs[*],perl -e 'foreach (`cpstat ls -f logging 2>&1 || cpstat mg -f log_server 2>&1 `){next unless /$1/; if (/Disconnected/){print 0;exit;}elsif (/Connected/){print 1;exit}}'
UserParameter=cpstat_log_disconnected_vs[*], perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); foreach (run_cmd("vsenv $1 ; cpstat mg -f log_server","a")){next unless /Disconnected/;; s/\s{1,}//g; @split = split/\|/; print "$split[1] "}'

UserParameter=cpstat_fw_log_disconnected[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_gw(); $out = run_cmd("vsenv $1 ; cpstat fw -f log_connection", "s", 600); if ($out =~ /Writing logs locally due to connectivity problems/){print 2}elsif ($out =~ /Logs are written to log server|reporting logs as defined/){print 1}else{print 9999}'


UserParameter=cpstat_mg_indexer_delay, perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); foreach (run_cmd("cpstat mg  -f indexer","a")){next unless /Read Logs Delay:/; ($rate) = /Read Logs Delay:\s{1,}(\d{1,})/;print $rate}'

UserParameter=cpstat_ca_all, perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); $out = run_cmd("cpstat ca -f all", "s", 600); if (grep/Up and Running:.*1/,$out){print 1}else{print 2}'

UserParameter=arping[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("arping -c1 -I $1 $2", "s", 600); if ($out =~ /reply from/){print 1}else{print 2}'

UserParameter=netstat_time_wait,netstat -n|grep "TIME_WAIT"|grep -v "127.0.0.1"|wc -l

UserParameter=ips_staging_count, perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} exit unless is_mgmt(); $out = run_cmd(qq#psql_client cpm postgres -c "select objid from dbindexsdtopicperprofiledynamic_data where dlesession=0 and deleted=false and objid in (select protection from threatipsprotectionoverride_data where stagingmode=true and dlesession=0 and deleted=false);"#, "s", 600); ($count) = $out =~/\((.*) rows\)/; if ($count){print $count;}else{print 9999}'

UserParameter=api_status,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_mgmt"){print 8888;exit}$out = run_cmd("api status", "s", 600); if ($out =~ /SUCCESSFUL/){print 1}elsif($out =~ /FAILED/){print 9999}else{print 9999}'

UserParameter=mgmt_cli_test,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_mgmt"){print 8888;exit}$out = run_cmd("mgmt_cli -r true show test", "s", 600); if ($out =~ /generic_err_command_not_found/){print 1}elsif($out =~ /Error/){print 9999}else{print 9999}'

UserParameter=mgmt_cli_show_changes,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_mgmt"){print 8888; exit}; $date_file = "/tmp/zabbix_show_changes"; $date_file_count = $date_file."_count"; if (-f $date_file_count) {system "cat $date_file_count"; }else{print 7777} fork && exit; if (-f $date_file) {chomp($date = `cat "$date_file"`); $date_cache = 1;} else {chomp($date_year = run_cmd("date +%Y", "s", 60000));  $month = 1; $day = 0} chomp($date_month = run_cmd("date +%m", "s", 6000)); $date_month =~ s/^0//; while (++$i < 300) {if ($date_cache) {$date_cmd = $date}else{$day++; if ($day == 32){$month++; $day = 1} $date_cmd = "$date_year-$month-$day"} if ($month > $date_month){print 9999; exit } $cmd = "mgmt_cli -r true show changes from-date $date_cmd details-level uid limit 1 2>&1"; print $cmd; if ($out =~ /Error/){print 9999; exit}; $out = run_cmd("$cmd", "s", 600); ($total) = $out =~ /total: (\d{1,})/; if ($date_cache && !$total){$date_cache = 0;chomp($date_year = run_cmd("date +%Y", "s", 60000)); $month = 1; $day = 0} if ($total) {system qq#echo "$date_cmd" >$date_file#; system qq#echo $total >$date_file_count#; exit} } print 9999; unlink $date_file;'

UserParameter=policy_installed_name[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; fw stat", "a", 600)){ next unless /localhost/; @split = split/ {1,}/; $policy = $split[1]}; if ($policy){print $policy}else {print 9999}'

UserParameter=cpview_high_cpu[*],perl -ne 'unless (-f "/tmp/is_gw"){print 8888;exit} next unless /Instance high CPU/; s/,//g; ($value) = m#Instance high CPU\s{1,}(\d*)#; END{if ($value || ($value == 0)){print $value}else{print 9999} }' /tmp/cpview_vs$1

UserParameter=cpview_syn_drop[*],perl -ne 'unless (-f "/tmp/is_gw"){print 8888;exit} next unless /First packets not SYN/; s/,//g; ($value) = m#First packets not SYN\s{1,}(\d*)#; END{if ($value || ($value == 0)){print $value}else{print 9999} }' /tmp/cpview_vs$1

UserParameter=cpview_tcp_mbit[*],perl -ne 'unless (-f "/tmp/is_gw"){print 8888;exit} $next = 1 if /CPVIEW.Network.Top-Protocols/; next unless $next; next unless /TCP/; ($value) = m#TCP\s{1,}(\d{1,})#; exit if $value; END{if ($value || ($value == 0)){print $value}else{print 9999} }' /tmp/cpview_vs$1

UserParameter=cpview_udp_mbit[*],perl -ne 'unless (-f "/tmp/is_gw"){print 8888;exit} $next = 1 if /CPVIEW.Network.Top-Protocols/; next unless $next; next unless /UDP/; ($value) = m#UDP\s{1,}(\d{1,})#; exit if $value; END{if ($value || ($value == 0)){print $value}else{print 9999} }' /tmp/cpview_vs$1

UserParameter=cpview_other_mbit[*],perl -ne 'unless (-f "/tmp/is_gw"){print 8888;exit} $next = 1 if /CPVIEW.Network.Top-Protocols/; next unless $next; next unless /Other/; ($value) = m#Other\s{1,}(\d{1,})#; exit if $value; END{if ($value || ($value == 0)){print $value}else{print 9999} }' /tmp/cpview_vs$1

UserParameter=cpview_top_src_discovery[*],perl -ne 'unless (-f "/tmp/is_gw"){print 8888;exit} BEGIN{$first = 0; print "{\n"; print "\t\"data\":[\n\n";}  $next++ if /CPVIEW.Network.Top-Connections/; next unless $next; $next++ if /Connection.*Protocol/; next unless $next == 2; exit if /^$/; s/\||-|^\s//g; @split = split/\s{1,}/; next unless $split[1] =~ /\d/; $split[1] =~ s/:.*//; $host{$split[1]} += $split[5]; END{$ipa = `source /etc/profile.d/vsenv.sh; vsenv $1 2>/dev/null`;  ($vs_name) = $ipa =~ /Context is set to Virtual Device (.*?)\s/; if ($ipa =~ /name unavailable/){chomp($vs_name = `hostname`)} foreach $key (keys %host){if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#IP}\":\"$key\", \t\t\"{#VSID}\":\"$1\"}\", \t\t\"{#VSNAME}\":\"$vs_name\"}";}print "\n\t]}\n"}' /tmp/cpview_vs$1

UserParameter=diff_ss,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("ss -pleant", "a", 600)){next unless /LISTEN/; ; ($process) = /"(.*?)",/; next unless $process; print $process."\n";}' >/tmp/zabbix_diff_ss.tmp; /usr/share/zabbix/bin/perl-5.10.1/perl -e 'foreach (`diff -a /tmp/zabbix_diff_ss.tmp /tmp/zabbix_diff_ss 2>/dev/null`){chomp; next if /^\d|fw_full|cpprod_util/;print "$_ "; }'; mv -f /tmp/zabbix_diff_ss.tmp /tmp/zabbix_diff_ss &>/dev/null

UserParameter=ssh_checkpoint[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; ssh -vvv -oStrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -o ConnectTimeout=5 test\@$2", "s", 600); if ($out =~ /remain after connect|Connection established/){print 1}elsif ($out =~~/Connection timed out/){print 2}else{print 3}'

UserParameter=discovery_fwk,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} BEGIN{require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("top -H -b -n1", "a", 600)){s/^\s{1,}//; @split = split/\s+/; ($vsid) = /fwk(\d{1,})_/;   if (/fwk\d{1,}_\d{1,}|fw_worker_\d{1,}/){ ($vs_name) = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid 2>/dev/null", "s", 600) =~ /Context is set to Virtual Device (.*?)\s/; $vs_name = "" if $vs_name eq "<name"; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#VSID}\":\"$vsid\", \t\t\"{#NAME}\":\"$split[11]\", \t\t\"{#VSNAME}\":\"$vs_name\", \t\t\"{#CPU}\":\"$split[8]\"}";  }} print "\n\t]}";'

UserParameter=cpu_process[*],perl -e 'BEGIN{require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("top -H -b -n1", "a", 600)){s/^\s{1,}//; @split = split/\s+/; if ($split[11] eq "$1"){print $split[8];exit}}'

UserParameter=discovery_processes[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("top -H -b -n1", "a", 600)){s/^\s{1,}//; @split = split/\s+/;  if ($split[11] && $split[8] > 1){ $process{$split[11]} = $split[8]}} while (($key, $value) = each (%process)){ if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#NAME}\":\"$key\", \t\t\"{#CPU}\":\"$value\"}";  } print "\n\t]}";'

UserParameter=processes_cpu[*],perl -e 'BEGIN{require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("top -H -b -n1", "a", 600)){s/^\s{1,}//; @split = split/\s+/;  if ($split[11] eq "$1"){ $process{$split[11]} = $split[8]}} while (($key, $value) = each (%process)){ print $value || 0000 ;exit} print 0000'

UserParameter=processes_mem[*],perl -e 'BEGIN{require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("top -H -b -n1", "a", 600)){s/^\s{1,}//; @split = split/\s+/;  if ($split[11] eq "$1"){ $process{$split[11]} = $split[8]}} while (($key, $value) = each (%process)){ print $value || 0000 ; exit} print 0000'

UserParameter=snapshot_progress,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd(qq#clish -c "show snapshots"#, "s", 600); exit unless $out =~ /%/; ($progress) = $out =~ /(\d{1,})%/; print $progress'

UserParameter=snapshot_free_space,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd(qq#clish -c "show snapshots"#, "s", 600); ($free) = $out =~ /points is (\d{1,})\./; print $free'

UserParameter=speedtest[*],source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null && curl_cli -m 10 "$2" -o /dev/null -w %{speed_download} -s

UserParameter=discovery_vpn_peer,ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd(qq#echo -e "1\n\nq\n"|vpn tunnelutil#, "a", 600)){next unless /Peer/; ($peer) = /Peer\s{1,}.*?\s{1,},\s{1,}(.*?) SAs:/; unless ($peer){($peer) = /Peer\s{1,}(.*?) SAs:/;}  next unless $peer; $peer{$peer} = 1;} foreach (keys %peer){ if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#NAME}\":\"$_\"}";  } print "\n\t]}";'

UserParameter=vpn_peer_check[*],ls /tmp/is_gw &>/dev/null && perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd(qq#echo -e "1\n\nq\n"|vpn tunnelutil#, "a", 600)){next unless /Peer/; ($peer) = /Peer\s{1,}.*?\s{1,},\s{1,}(.*?) SAs:/; unless ($peer){($peer) = /Peer\s{1,}(.*?) SAs:/;}  next unless $peer; if ($peer eq "$1"){$ok = 1}} print $ok|| 0'

UserParameter=ping_ip_source_all[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; ip a", "a", 600)){next unless /inet /; next if /127.0.0.1/; s/^\s{1,}//; @split = split /\s{1,}/; $ip = $split[1]; $ip =~ s/\/.*//; $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; ping -w 1 -c 1 -I $ip $2", "s", 600); print "$ip " if $out =~ /100% packet loss/ }'

UserParameter=dig_dns[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 5; $ip_dns = "$2"; exit unless $ip_dns; $count = "$3" || 10; foreach (1 .. $count){$out = run_cmd("vsenv $1 ; dig vg.no \@$ip_dns", "s", 600);($timeout) = $out =~ m/Query time: (\d*) msec/; $time_tot += $timeout; if ($@){print 9999;exit}}}; print int($time_tot/$count)'

UserParameter=disk_usage_all,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("du -h /", "s", 600)){next if m#/sys|/dev|/proc|hps_pe_store|opt$|/var$|/$#; @split = split/\s{1,}/; next unless $split[0] =~ /G$|T$/; $split[0] =~ s/\..*//; ($size) = $split[0] =~ /^(\d{1,})/; next unless $size > 2; print "$size $split[1]\n"}'

UserParameter=files_counter,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("find / 2>/dev/null", "a", 6000)){next if m#/sys|/dev|/proc|hps_pe_store#; ($path) = m#(.*)/.*#; next unless $path; $path{$path} +=1}; foreach (keys %path){next unless $path{$_} > 10000; print "$_ $path{$_}\n" }'

UserParameter=discovery_disk_usage_all,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("du -Sh / 2>/dev/null", "a", 60000)){next if m#scrub|/sys|/dev|/proc|/$|log_indexe|apache|/var$|postgresql|/usr$|/usr/local$|opt$|jail|te_file_analyzer|lvsnap#; @split = split/\s{1,}/; next unless $split[0] =~ /G$|T$/; $split[0] =~ s/\..*//; ($size) = $split[0] =~ /^(\d{1,})/; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#DIR}\":\"$split[1]\", \t\t\"{#SIZE}\":\"$size\"}"; } print "\n\t]}";'

UserParameter=discovery_files_counter[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n";  foreach (run_cmd("find / 2>/dev/null", "a", 60000)){next if m#indicators|scrub|/sys|/dev|/proc|hps_pe_store#|lvsnap; ($path) = m#(.*)/.*#; next unless $path; $path{$path} +=1}; foreach (keys %path){next unless $path{$_} > $1; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#DIR}\":\"$_\", \t\t\"{#COUNT}\":\"$path{$_}\"}"; }  print "\n\t]}";'

#UserParameter=dir_count_files[*],find $1 -maxdepth 1 2>/dev/null|wc -l
UserParameter=dir_count_files[*], perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} my @out = run_cmd("find $1 -maxdepth 1", "a", 6000); print scalar @out'

UserParameter=local_log_files,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("find / 2>/dev/null", "a", 6000)){next unless /\d{4}-\d{2}-\d{2}.*\.log$/; $i++;} print $i || 0'

UserParameter=fw_ver,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cpstat os", "a", 600)){next unless /Foundation Build Number:/; ($ver) = /:\s{1,}(.*)/; } ($fw_ver) = run_cmd("fw ver", "s", 600) =~ /Build (.*)/; if ($ver && $fw_ver){print "$ver $fw_ver"}else{print 9999}'

UserParameter=version_md5,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $cpinfo = run_cmd("cpinfo -y all", "s", 600); if ($cpinfo){$md5 = run_cmd("echo "$cpinfo"|md5sum", "s", 600); $md5 =~ s/\D//g; $md5 = substr $md5, -5; print $md5 }else{print 9999}'

UserParameter=dd_speed_var_log,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $tmp = "/tmp/zabbix_dd_test"; $df = run_cmd("df -k /var/log", "s", 600); ($free) = $df =~ /\d{1,}\s{1,}\d{1,}\s{1,}(\d{1,})\s/; if (($free/1024/1024) < 2){print 7777;exit}; $out = run_cmd("dd if=/dev/zero of=/var/log/dd_speed_test oflag=direct bs=100M count=1", "s", 600); unlink "/var/log/dd_speed_test"; ($speed) = $out =~ /s, (\d{1,})/;unless ($speed){print 6666; exit} if ($out =~ m#MB/s#){print (($speed*1024)*1024)}elsif ($out =~ m#GB/s#){print int((($speed*1024)*1024)*1024)}'

UserParameter=dd_speed_root,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $tmp = "/tmp/zabbix_dd_test"; $df = run_cmd("df -k /", "s", 600); ($free) = $df =~ /\d{1,}\s{1,}\d{1,}\s{1,}(\d{1,})\s/; if (($free/1024/1024) < 2){print 7777;exit}; $out = run_cmd("dd if=/dev/zero of=/dd_speed_test oflag=direct bs=100M count=1", "s", 600") unlink "/dd_speed_test"; ($speed) = $out =~ /s, (\d{1,})/;unless ($speed){print 6666; exit} if ($out =~ m#MB/s#){print (($speed*1024)*1024)}elsif ($out =~ m#GB/s#){print int((($speed*1024)*1024)*1024)}'

UserParameter=hdparm_dev_read[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (1 .. 3){$out = run_cmd("hdparm --direct -t /dev/$1", "s", 600); unless ($out){print 9999; exit} ($speed) = $out =~ /=\s{1,}(\d{1,})\./; $speed_tot +=$speed } print int((($speed_tot/3)*1024)*1024)'

UserParameter=hdparm_cache_read[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (1 .. 3){$out = run_cmd("hdparm --direct -T /dev/$1", "s", 600); unless ($out){print 9999; exit} ($speed) = $out =~ /=\s{1,}(\d{1,})\./; $speed_tot +=$speed }print int((($speed_tot/3)*1024)*1024)' 

UserParameter=telnet_ip[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd("nc 127.0.0.1 2>&1 & pid=\\$! ; sleep 2; kill \\$pid", "s", 600); if ($out =~ /$2^C{print 1}else{print 2};'


#UserParameter=process_too_many,perl -e 'foreach (`top -H -b -n1`){s/^\s{1,}//; @split = split/\s{1,}/; $process{$split[11]} +=1 }; foreach (keys %process){if ($process{$_} > 200){print "$_ $process{$_}\n" }}'
UserParameter=process_too_many,perl -e 'BEGIN{require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("top -H -b -n1", "a", 60)){s/^\s{1,}//; @split = split/\s{1,}/; $process{$split[11]} +=1 }; foreach (keys %process){if ($process{$_} > 200){print "$_ $process{$_}\n" }}'

UserParameter=tecli_show_stat_scanned_files_on_cloud[*],perl -ne 'unless (-f "/tmp/enabled_blades_vs$1_te"){print 8888;exit} $tc = (stat("/tmp/zabbix_tecli_show_stat_vs$1"))[9]; if ((time()-$tc) > 60*10){system "source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; tecli show stat &>/tmp/zabbix_tecli_show_stat_vs$1"} next unless /Scanned files on cloud:/; s/.*?://; @split = split/\s{1,}/; print $split[1] ' /tmp/zabbix_tecli_show_stat_vs$1

UserParameter=tecli_show_stat_value[*],perl -e 'unless (-f "/tmp/enabled_blades_vs$1_te"){print 8888;exit} $tc = (stat("/tmp/zabbix_tecli_show_stat_vs$1"))[9]; if ((time()-$tc) > 60*10){system "source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; tecli show stat &>/tmp/zabbix_tecli_show_stat_vs$1"} foreach (`cat /tmp/zabbix_tecli_show_stat_vs$1`){next unless /$2/; s/.*?://; @split = split/\s{1,}/; ($digit) = $split[1] =~ /^(\d{1,})/; print $digit}'

UserParameter=find_file_count[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $i++ foreach run_cmd(qq#find / -iname "$1" 2>/dev/null#, "a", 6000); print $i || 0'

#cmd_get_value[/tmp/is_mgmt,/tmp/zabbix_cpstat_ls_f_indexer,10,0,cpstat ls -f indexer,Read Logs Rate:]
#$1 file path. Check if file exists
#$2 file path for cache file. Not in use. Changed to run_cmd()
#$3 cache file TTL in min
#$4 VSID. VS number
#$5 command. Command to run
#$6 regex
#UserParameter=cmd_get_value[*],perl -e 'unless (-f "$1"){print 8888;exit} $tc = (stat("$2"))[9]; if ((time()-$tc) > 60*$3){system "source /etc/profile.d/vsenv.sh; vsenv $4&>/dev/null ; $5 &>$2"} foreach (`cat $2`){next unless /$6/; s/.*?://; @split = split/\s{1,}/; ($digit) = $split[1] =~ /^(\d{1,})/; print $digit || 0}'
UserParameter=cmd_get_value[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "$1"){print 8888;exit} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $4&>/dev/null ; $5", "a", $3*60)){next unless /$6/; s/.*?://; @split = split/\s{1,}/; ($digit) = $split[1] =~ /^(\d{1,})/; print $digit || 0}'

#UserParameter=cmd_get_value_regex[*],perl -e 'unless (-f "$1"){print 8888;exit} $tc = (stat("$2"))[9]; if ((time()-$tc) > 60*$3){system "source /etc/profile.d/vsenv.sh; vsenv $4&>/dev/null && $5 &>$2"} $out = `cat $2`; ($data) = $out =~ /$6/s; if (defined $data){print $data}else{print 9999}'

#UserParameter=cmd_get_value_regex[*],perl -e 'unless (-f "$1"){print 8888;exit} $tc = (stat("$2"))[9]; if ((time()-$tc) > 60*$3){unlink "$2.lock"} while (-f "$2.lock"){if (++$wait == 10){print 7777;exit}; sleep 1;}  $tc = (stat("$2"))[9]; if ((time()-$tc) > 60*$3){system "touch $2.lock"; system qq#source /etc/profile.d/vsenv.sh; vsenv $4&>/dev/null ; $5 2>&1 &>$2#; unlink "$2.lock"} $out = `cat $2`; if ("$7"){$out =~ s/$7//g;} ($data) = $out =~ /$6/s; if (defined $data){ if ("$8"){$data =~ s/$8//g;} print $data}else{print 9999}'
UserParameter=cmd_get_value_regex[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "$1"){print 8888;exit} my $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $4&>/dev/null ; $5", "s", 600); $out =~ s/$7//g; ($data) = $out =~ /$6/s; if (defined $data){ if ("$8"){$data =~ s/$8//g;} print $data}else{print 9999}'


#cmd_get_value_line
#$1 = Check if file exist. If not exist $12 or 8888
#$2 = Local temp buffer filename. /etc/zabbix/cpview_VS1
#$3 = How many minutes before running command the command and recreating the file. Default 10
#$4 = VSID. Default 0
#$5 = CMD to run
#$6 = Optional. regex substitute line $6 with nothing s///g;
#$7 = Stop loop if $7 regex found on line
#$8 = split char. Typical \s{1,}
#$9 = Optional. substitute output from split with nothing s///g;
#$10 = split array count @split[$10]
#$11 = Error message if no output found. Default 9999
#$12 = File not found return message. Default 8888
#$13 = eval code to run on result
#$14 = Optional. substitute output with nothing s///g;
#cmd_get_value_line["/tmp/is_gw;;/tmp/zabbix_command_name;;min refresh cmd;;VSID;;CMD;;sub line string s/INPUT//g;;regex search on line;;split char \s{1,};;sub output string s/INPUT//g;;@split array count;;Error if string not found. 9999;;File not found. 8888";;eval code to run ]
#perl -e '$code = qq#\$split[8] = (100-\$split[8]);#; foreach (`top -b -n1 -p 6`){chomp; s/^\s{1,}//g; next unless /^\d/; @split = split/\s{1,}/; last} $split =~ s/\s{1,}//g; eval $code; print $split[8]; '
#
#test
#perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"}  ($file_exists,$file_buffer,$count_min,$vsid,$cmd,$reg_line,$reg_search,$split_char,$reg_result,$split_num,$msg_error,$msg_missing_file,$codresult) = split/;;/, qq#$ARGV[0]#; $count_min ||= 10; $msg_error ||= 9999; $msg_missing_file ||= 8888; $vsid ||= 0;  if (defined $file_exists and $file_exists and not -f "$file_exists"){print $msg_missing_file;exit}; foreach (run_cmd(qq#source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null ; $cmd#, "a", $3*60)){ if ("$reg_line"){s/$reg_line//g;} next unless /$reg_search/; @split = split/$split_char/; last} if ("$reg_result"){$split[$split_num] =~ s/$reg_result//g;} if (defined $split[$split_num]){eval $code_result if $code_result; print $split[$split_num]}else{print $msg_error}' ";;;;10;;0;;cpstat persistency -f TableConfig;;;;last day;;\\s{0,}\|\\s{0,};;;;6;;9999;;8888"

#UserParameter=cmd_get_value_line[*],perl -e '($file_exists,$file_buffer,$count_min,$vsid,$cmd,$reg_line,$reg_search,$split_char,$reg_result,$split_num,$msg_error,$msg_missing_file,$code_result) = split/;;/, qq#$1#; $count_min ||= 10; $msg_error ||= 9999; $msg_missing_file ||= 8888; $vsid ||= 0; unless (-f "$file_exists"){print $msg_missing_file;exit};  $tc = (stat($file_buffer))[9]; if ((time()-$tc) > 60*$count_min){unlink "$file_buffer.lock"} while (-f "$file_buffer.lock"){if (++$wait == 10){print 7777;exit}; sleep 1;}  $tc = (stat($file_buffer))[9]; if ((time()-$tc) > 60*$count_min){system "touch $file_buffer.lock"; system qq#source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null ; $cmd 2>&1 &>$file_buffer#; unlink "$file_buffer.lock"} foreach (`cat $file_buffer`){ if ("$reg_line"){s/$reg_line//g;} next unless /$reg_search/; @split = split/$split_char/; last} if ("$reg_result"){$split[$split_num] =~ s/$reg_result//g;} if (defined $split[$split_num]){eval $code_result if $code_result; print $split[$split_num]}else{print $msg_error}'
#UserParameter=cmd_get_value_line[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} ($file_exists,$file_buffer,$count_min,$vsid,$cmd,$reg_line,$reg_search,$split_char,$reg_result,$split_num,$msg_error,$msg_missing_file,$code_result) = split/;;/, qq#$1#; $count_min ||= 10; $msg_error ||= 9999; $msg_missing_file ||= 8888; $vsid ||= 0; unless (-f "$file_exists"){print $msg_missing_file;exit}; foreach (run_cmd(qq#source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null ; $cmd#, "a", $3*60)){ if ("$reg_line"){s/$reg_line//g;} next unless /$reg_search/; @split = split/$split_char/; last} if ("$reg_result"){$split[$split_num] =~ s/$reg_result//g;} if (defined $split[$split_num]){eval $code_result if $code_result; print $split[$split_num]}else{print $msg_error}'
#UserParameter=cmd_get_value_line[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"}  ($file_exists,$file_buffer,$count_min,$vsid,$cmd,$reg_line,$reg_search,$split_char,$reg_result,$split_num,$msg_error,$msg_missing_file,$code_result,$regex_result) = split/;;/, qq#$ARGV[0]#; $count_min ||= 10; $msg_error ||= 9999; $msg_missing_file ||= 8888; $vsid ||= 0;  if (defined $file_exists and $file_exists and not -f "$file_exists"){print $msg_missing_file;exit}; foreach (run_cmd(qq#source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null ; $cmd#, "a", $count_min*60)){ if ("$reg_line"){s/$reg_line//g;} next unless /$reg_search/; @split = split/$split_char/; last} if ("$reg_result"){$split[$split_num] =~ s/$reg_result//g;} if (defined $split[$split_num]){eval $code_result if $code_result; if (defined $regex_result){$split[$split_num] =~ s/$regex_result//;} print $split[$split_num]}else{print $msg_error}' "$1"
UserParameter=cmd_get_value_line[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"}  ($file_exists,$file_buffer,$count_min,$vsid,$cmd,$reg_line,$reg_search,$split_char,$reg_result,$split_num,$msg_error,$msg_missing_file,$code_result,$regex_result) = split/;;/, qq#$ARGV[0]#; $count_min ||= 10; $msg_error ||= 9999; $msg_missing_file ||= 8888; $vsid ||= 0;  if (defined $file_exists and $file_exists and not -f "$file_exists"){print $msg_missing_file;exit}; foreach (run_cmd(qq#source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null ; $cmd#, "a", $count_min*60)){ if ("$reg_line"){s/$reg_line//g;} next unless /$reg_search/; @split = split/$split_char/; last} if ("$reg_result"){$split[$split_num] =~ s/$reg_result//g;} if (defined $split[$split_num]){eval $code_result if $code_result; if (defined $regex_result){$split[$split_num] =~ s/$regex_result//g;} print $split[$split_num]}else{print $msg_error}' "$1"

UserParameter=cpview_top_connections[*],perl -e 'foreach (1..10) {foreach (`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpview -p`){$p = "" unless /^\|/; $p = 1 if /.CPVIEW.Network.Top-Connections/; s/\||-//; next if /--/; s/^\s{1,}//; @split = split/\s{1,}/; print "$split[0]\t\t$split[2]\t\t$split[3]\t\t$split[4]\n" if $p == 2; $p++ if /Connection /;} sleep 0.5}'

UserParameter=cpview_p_compressed[*],perl -e 'foreach (1..1) {foreach (`source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cpview -p`){next if /---/; s/\|//g; s/VSid:.*//; s/\s{1,}$//; print "$_\n"} sleep 0.5}' | gzip -9 -f | base64 -w0

UserParameter=clish_show_installer_packages,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} LOOP:foreach (run_cmd(qq#clish -c "show installer packages"#, "a", 600)){exit if /Majors|Blink Images/; chomp ($last = $_) unless /^ /; next unless /Available for Download/; next if -f "/tmp/is_gw" && /SmartConsole/; next if /Gaia Fast Deployment/; $_ = "$last $_" if /^ /; s/\s{1,}Available.*//; s/\s{2,}/  /; chomp; foreach $l (`cat /tmp/zabbix_installer_packages 2>/dev/null`){chomp $l; next LOOP if $_ eq $l}; system qq#echo "$_">>/tmp/zabbix_installer_packages#; print; exit}'

UserParameter=clish_show_installer_packages_downloaded,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} LOOP:foreach (run_cmd(qq#clish -c "show installer packages"#, "a", 600)){exit if /Majors|Blink Images/; chomp ($last = $_) unless /^ /; next unless /Available for Install/; $_ = "$last $_" if /^ /; s/\s{1,}Available.*//; s/\s{2,}/  /; chomp; print "$_\n";}'

#UserParameter=country_download,perl -e 'BEGIN{push @INC,"/usr/share/zabbix/bin/perl-5.10.1/lib"} use LWP::Simple; ($time_url) = (head("http://zabbix.kjartanohr.no/zabbix/country.csv.gz"))[2]; $time_local = (stat("/tmp/zabbix_country.csv.gz"))[9]; if ($time_url > $time_local){system "curl_cli http://zabbix.kjartanohr.no/zabbix/country.csv.gz -o /tmp/zabbix_country.csv.gz &>/dev/null"; if (-f "/tmp/zabbix_country.csv.gz"){print 1; system "touch /tmp/zabbix_country_update"; system "gunzip -f -c /tmp/zabbix_country.csv.gz >/tmp/zabbix_country.csv";  exit}else{print 2;exit}}else{print 3}'

#UserParameter=country_update_db[*],perl -e 'BEGIN{push @INC,"/usr/share/zabbix/bin/perl-5.10.1/lib"} use POSIX qw(setsid); $version = "12344567892"; "country-database-updater";  foreach (`ps xa`){next unless ($ver) = /version = "(\d*?)"/; s/^\s{1,}//; @split = split/\s{1,}/,$_; system "kill $split[0]" if $version > $ver }; setsid();  $SIG{HUP} = 'IGNORE';  $vsid = $1; unless (-f "/tmp/is_gw"){print 8888;exit} foreach (`ps xa`){next if /$$/; next unless /country-database-updater/; print 3;exit} unless (-f "/tmp/zabbix_country_update_vs$vsid"){print 1; }else{print 2;exit} fork && exit; @csv = `cat /tmp/zabbix_country.csv`; foreach (@csv){chomp; s/\n|\r//g; s/"//g; @split = split/,/; $country{$split[2]} = 1; } foreach $country (sort keys %country){s/\n|\r//g; $cmd = qq#source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null && dynamic_objects -do country_$country 2>&1 >>/tmp/zabbix_country.log#; system $cmd; system "echo \"$cmd\">>/tmp/zabbix_country.log"; $cmd = qq#source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null && dynamic_objects -n country_$country 2>&1 >>/tmp/zabbix_country.log#; system $cmd; system "echo \"$cmd\">>/tmp/zabbix_country.log";  foreach (grep /$country/,@csv){chomp; s/\n|\r//g; s/"//g; @split = split/,/; $cmd = qq#source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null &&  dynamic_objects -o country_$split[2] -r $split[0] $split[1] -a 2>&1#;  foreach $retry (1..100){$out = `$cmd`; system "echo \"$retry $out\n$cmd\">>/tmp/zabbix_country.log"; if ($out =~ /Log update success/){last} sleep 0.5  }}} system "touch /tmp/zabbix_country_update_vs$vsid"'


#UserParameter=country_database_populated[*],perl -e ' unless (-f "/tmp/is_gw"){print 8888;exit} chomp($out = `source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null && dynamic_objects -l|wc -l`); unless ($out =~ /\d/){print 1} print $out;'

#UserParameter=country_update_running,perl -e 'if (`ps xa|grep zabbix_country.csv|grep -v grep`){print 1}else{print 2}'

UserParameter=fwaccel_cfg_e_2000[*],source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; fwaccel cfg -e 2000

UserParameter=process_mem[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("ps xaueww", "a", 600)){s/^\s{1,}//; @split = split/\s+/;  if ($split[10] eq "$1"){ $process{$split[10]} += int $split[3]}} while (($key, $value) = each (%process)){ print $value || 0000; exit} print 0000'

UserParameter=process_mem_discovery,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("ps xaueww", "a", 600)){s/^\s{1,}//; @split = split/\s+/; $process{$split[10]} +=$split[3]} while (($key, $value) = each (%process)){ next unless $value > 0; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#NAME}\":\"$key\", \t\t\"{#MEM}\":\"$value\"}";  } print "\n\t]}";'

UserParameter=snapshot_exist[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $out = run_cmd(qq#clish -c "show snapshots"#, "s", 600); if ($out =~ /$1/i){print 1}else{print 2}'

UserParameter=snapshot_zabbix_exist[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd(qq#clish -c "show snapshots"#, "a", 600)){if (/--/){$p=1;next}; last if /^$/; next unless $p; if (/ZABBIX/){$o .= $_};  } $date = `date --date="$1 days ago" +"%Y_%m_%d"`; chomp $date; if ($o =~ /$date/){print 1}else{print 2};'


UserParameter=snapshot_delete_old,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} system qq#clish -c "lock database override"#; foreach (run_cmd(qq#clish -c "show snapshots"#, "a", 600)){next unless /_ZABBIX/; chomp; push @sh,$_;} foreach (reverse sort @sh){if (++$i > 3){system qq#clish -c "delete snapshot $_"#; print "$_\n";} } '

UserParameter=add_snapshot,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} system qq#clish -c "lock database override"#; chomp ($date = run_cmd("date +%Y_%m_%d", "s", 6000)); $date .= "_ZABBIX"; $out = `clish -c "add snapshot $date"`; print $out'

UserParameter=ping_pong,echo 1

UserParameter=check_smtp[*],perl -e 'BEGIN{push @INC,"/usr/share/zabbix/bin/perl-5.10.1/lib"} use IO::Socket; $sock = IO::Socket::INET->new(PeerAddr => "$1", PeerPort => $3, Proto => "tcp", Timeout => 1); if ($@){print 9999}; $out = <$sock>; if ($out =~ /$2/){print 1 }else{print 2} '


UserParameter=cmd_match_text[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $file = "$1"; $vsid = $2; $cmd = "$3"; $match = "$4"; $sub = "$5";  unless (-f $file){print 8888;exit} $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null ; $cmd", "s", 600); if ($sub){$out =~ s/$sub//s;} if ($out =~ /$match/){print 1}else{print 2} '

#UserParameter=cmd_match_text_ml[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $file = "$1"; $vsid = $2; $cmd = "$3"; $match = "$4"; $sub = "$5"; unless (-f $file){print 8888;exit} $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null ; $cmd", "s", 600); if ($sub){$out =~ s/$sub//s;} if ($out =~ /$match/s){print 1}else{print 2} '
UserParameter=cmd_match_text_ml[*], perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $file = "$ARGV[0]"; $vsid = "$ARGV[1]" || 0; $cmd = "$ARGV[2]" || die "Need a command to run"; $match = "$ARGV[3]" || die "Need a regex to extract data"; $sub = "$ARGV[4]"; if ($file and not -f $file){print 8888;exit} $out = run_cmd("vsenv $vsid&>/dev/null ; $cmd", "s", 600); if ($sub){$out =~ s/$sub//s;} if ($out =~ /$match/s){print 1}else{print 2} ' "$1" "$2" "$3" "$4" "$5"

UserParameter=fw_ctl_affinity_-l_mq,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_gw"){print 8888;exit} $out = run_cmd("fw ctl affinity -l", "s", 600); unless ($out){print 9999;exit} unless ($out =~ /multi queue enabled/){print 1;exit} foreach (`cat /proc/cpuinfo`){next unless /processor.*:/; $cpu = (split/\s{1,}/)[2];} if ($cpu < 6 ){print 2}else{print 3}'

UserParameter=mds_discovery,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; if ($first == 0){ ($search) = `cat /etc/resolv.conf` =~ /search (.*)/; $hostname = get_hostname(); } foreach (run_cmd("mdsstat", "a", 600)){s/\|//g; s/^\s{0,}//; @split = split/\s{1,}/; if ($split[0] eq "MDS"){print "{\t\t\"{#MDSNAME}\":\"$hostname\", \t\t\"{#MDSID}\":\"$split[2]\",\t\t\"{#SEARCH}\":\"$search\",\t\t\"{#HOSTNAME}\":\"$hostname\"}";} next unless $split[0] eq "CMA"; $mdsid = $split[2];  $first++; print ",\n{\t\t\"{#MDSNAME}\":\"$split[1]\", \t\t\"{#MDSID}\":\"$mdsid\",\t\t\"{#SEARCH}\":\"$search\",\t\t\"{#HOSTNAME}\":\"$hostname\"}";}print "\n\t]}\n";'

UserParameter=discovery_port,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("fwaccel conns", "a", 600)){s/^\s{1,}//; @split = split /\s{1,}/; next if $split[1] == 0; $p{$split[1]} +=1; $p{$split[3]} +=1}; foreach $k (sort { $a <=> $b }  keys %p){last if $i++ == 50; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#PORT}\":\"$k\"}"; }  print "\n\t]}"'

UserParameter=port_count[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("fwaccel conns", "a", 600)){s/^\s{1,}//; @split = split /\s{1,}/; next if $split[1] == 0; $p{$split[1]} +=1; $p{$split[3]} +=1}; print $p{$1}'

UserParameter=echo[*],perl -e 'print "$1"'

UserParameter=get_vsid_from_hostname[*],perl -e '($id) = "$1" =~ /(\d{1,})$/; print $id'

UserParameter=discovery_vsx_cpu,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("fw vsx resctrl -u stat", "a", 600)){$p++ if /==/; next unless $p == 2; s/^\s{1,}//; chomp; @split = split/\s{1,}/; if (/^\d/){($vsid,$vsname) = /^(\d{1,})\s{1,}(.*?)\s/; shift @split foreach 1..2 } next unless $split[1] =~ /^\d/; if ($first ne 0){print ","} $first++; print "\n{\t\t\"{#VSNAME}\":\"$vsname\",\t\t\"{#VSID}\":\"$vsid\", \t\t\"{#CPUID}\":\"$split[1]\"\, \t\t\"{#CPU}\":\"$split[5]\"}"; } print "\n\t]"; print "}\n";'

UserParameter=discovery_interrupts,perl -e '$first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (`cat /proc/interrupts`){next if /timer|serial|ahci/; s/^.*?:\s{1,}//;@split = split/\s{1,}/; next if $split[0] =~ /LOC:|RES:|^$/; $name = ""; foreach (@split){next if /^\d|CPU/; $name .= "$_ "};next unless $name; $name =~ s/\s{1,}$//; $cpu = 0;  $c = 0; foreach (@split){last unless /^\d/; $c +=$_} next if $c < 1000;  foreach (@split){last unless /^\d/;  if ($first ne 0){print ","} $first++; print "\n{\t\t\"{#CPU}\":\"$cpu\",\t\t\"{#DESC}\":\"$name\"}"; $cpu++}}  print "\n\t]"; print "}\n";'

UserParameter=interrupts[*],perl -e 'foreach (`cat /proc/interrupts`){s/^.*?:\s{1,}//;@split = split/\s{1,}/; next if $split[0] =~ /LOC:|RES:|^$/; $name = ""; foreach (@split){next if /^\d|CPU/; $name .= "$_ "};next unless $name; $cpu = 0; $name =~ s/\s{1,}$//; foreach (@split){last unless /^\d/; if ($name eq "$1" && $cpu eq "$2"){$return = $_ } $cpu++}}  if (defined $return ){print $return}else{print 9999}'


UserParameter=discovery_sysenv,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd(qq#clish -c "show sysenv all"#, "s", 600)){$p++ if /Name/; next unless $p; chomp; next if /Name/; @split = split/\s{2,}/; next unless $split[0]; $split[0] =~ s/\+//g; if ($first ne 0){print ","} $first++; print "\n{\t\t\"{#NAME}\":\"$split[0]\"}"; }  print "\n\t]"; print "}\n";'

UserParameter=free_diskspace_percent[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("df", "a", 600)){next unless m#$1$#; s/%//; $out = ((split/\s{1,}/)[4]) } if ($out){print $out}else{ print 9999}'

UserParameter=coredump,perl -e 'foreach (`cat /tmp/zabbix_coredump 2>/dev/null`){chomp; $db{$_} = 1;} foreach (`ls /var/log/dump/usermode/`){chomp; next if $db{$_}; next if /script/; s/\.\d{3,}.*//; print "$_ "; } system "ls /var/log/dump/usermode/ >/tmp/zabbix_coredump" '

UserParameter=discovery_dns,perl -e '$first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (`cat /etc/resolv.conf`){next unless /^nameserver/; chomp; @split = split/\s{1,}/; next unless $split[1]; if ($first ne 0){print ","} $first++; print "\n{\t\t\"{#IP}\":\"$split[1]\"}"; }  print "\n\t]"; print "}\n";'

UserParameter=dns_dig_resolve.conf[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $vsid = $1; $line = $2; $count = 1; foreach (run_cmd("cat /etc/resolv.conf", "a", 600)){next unless /^nameserver/; @split = split/\s{1,}/; if ($count++ == $line){ eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 5; $out = run_cmd("vsenv $vsid ; dig vg.no @$split[2]", "s", 600); }}; alarm 0; }; unless ($out){print 9999;exit} ($timeout) = $out =~ m/Query time: (\d*) msec/; if ($@){print 9999} else {if (defined $timeout){print $timeout}else{print 9999;}  }'

UserParameter=discovery_fw_tab[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $vsname = "$1"; exit unless defined $vsname; ($vsid) = $vsname =~ /(\d{1,})$/; $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null ; fw tab -s", "a", 6000)){next unless /localhost/; chomp; @split = split/\s{1,}/; next if $split[3] == 0; if ($first ne 0){print ","} $first++; print "\n{\t\t\"{#NAME}\":\"$split[1]\",\t\t\"{#VSID}\":\"$vsid\"}";  }  print "\n\t]"; print "}\n";'

#UserParameter=discovery_pid,perl -e '$first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (`top -b -n1 -H`){s/^\s{1,}//; next unless /^\d{1,}/; chomp; ($pid) = $_ =~ /^(\d{1,})\s/; next if (stat("/proc/$pid"))[9] > (time-60*10); ($name) = `grep "Name:" /proc/$pid/status 2>/dev/null` =~ /Name:\t{1,}(.*)/; next unless $name; if ($first ne 0){print ","} $first++; print "\n{\t\t\"{#NAME}\":\"$name\",\t\t\"{#PID}\":\"$pid\"}";  }  print "\n\t]"; print "}\n";'

UserParameter=discovery_pid[*],perl -e 'my $min_run_time = "$1" || 24; $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (`top -b -n1 -H`){s/^\s{1,}//; next unless /^\d{1,}/; chomp; ($pid) = $_ =~ /^(\d{1,})\s/; next if (stat("/proc/$pid"))[9] > (time-24*60*60); ($name) = `grep "Name:" /proc/$pid/status 2>/dev/null` =~ /Name:\t{1,}(.*)/; next unless $name; if ($first ne 0){print ","} $first++; print "\n{\t\t\"{#NAME}\":\"$name\",\t\t\"{#PID}\":\"$pid\"}";  }  print "\n\t]"; print "}\n";'

UserParameter=diff_file[*],perl -e '$vsid = "$1" || 0; $fname = "$2"; unless ($fname){print 8888;exit}; $name = $fname; $name  =~ s/\W/_/g; $ftmp = "/tmp/zabbix_diff_$name"; unless (-f $ftmp){system qq#cp "$fname" "$ftmp" &>/dev/null#} foreach (`source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null ; diff -a $fname $ftmp`){next unless $i++; print } system qq#cp -f "$fname" "$ftmp" &>/dev/null#;'

UserParameter=count_lines[*],perl -ne 'if ("$2"){next if /$2/} if ("$3"){next unless /$3/} $i++; END{print $i}' $1

#UserParameter=get_text[*],perl -e '$fname = "$1"; $fname =~ s/\W/_/g; $line_from_log = `cat /tmp/zabbix_log_last_$fname`; foreach (`$1`){$last_line = $_; unless (/zabbix marker/){$log_line = $_} if ($line_from_log eq $_){$data = undef; next; } next if /zabbix marker/; $data .= $_; } system qq#echo -n "$log_line" >/tmp/zabbix_log_last_$fname#; print $data' | uniq -u


# $1, filename
# $2, skip file if /$2/
UserParameter=discovery_file[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("find / 2>/dev/null", "a", 6000)){if ("$2"){next if m#/mnt/backup/#; next if /$2/} next unless /$1/; chomp; if ($first ne 0){print ","} $first++; print "\n{\t\t\"{#NAME}\":\"$_\"}";  }  print "\n\t]"; print "}\n"; '

UserParameter=vpn_users,perl -e 'foreach (`echo -e "1\n\nq\n"|vpn tunnelutil 2>&1`){next unless / user md5 /; ($ip) = /Peer\s{1,}(.*?),/; push @ip,$ip  }; foreach $pep (`pep show user all`){ foreach $ip (@ip){ @split = split/\s{1,}/,$pep; if ($ip eq $split[4]){$result{"$split[3] $split[4]"} = 1} }}; exit unless %result; print join "\n", keys %result; print "\nUsers connected: ".scalar keys %result'

UserParameter=find_files_total_size[*], perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("find / 2>/dev/null", "a", 2*60*60)){chomp; next unless m#$1#; $size_total += (stat($_))[7];} print $size_total'

#UserParameter=top_cpu_usage_process_name[*],perl -e '$top  = "/tmp/zabbix_top"; unless (-f $top){print 9999; exit} foreach (`cat $top`){s/^\s{0,}//; @split = split/\s{1,}/;  next unless $split[8] =~ /^\d/; next unless $split[8] > $1; $ps = `ps -o args -p $split[0]`; $ps =~ s/COMMAND\n//; next unless $ps; chomp $ps; print "NAME: $ps CPU: $split[8] " }'

UserParameter=top_cpu_usage_process_name[*],perl -e '$top  = "/tmp/zabbix_top"; unless (-f $top){print 9999; exit} foreach (`cat $top`){s/^\s{0,}//; next unless /^\d/; @split = split/\s{1,}/;  next unless $split[8] =~ /^\d/; next unless $split[8] > $1; next if $split[11] =~ /fw_full|java|log_indexer|find/; print "NAME: $split[11] CPU: $split[8] " }'

UserParameter=vsx_cpu_total[*],perl -e '$vsname = "$1"; $start = 0; $file = "/tmp/zabbix_fw_vsx_resctrl_-u_stat"; unless (-f $file){print 9999;exit} foreach (`cat $file`){s/^\s{0,}//; $start = 0 if /Avg\./; $start = 1 if /$vsname/; next unless $start; s/.*?\|\s{1,}//; @split = split/\s{1,}/; $cpu += $split[4]} print $cpu' 

UserParameter=vsx_cpu_total_devided_by_corexl[*],perl -e '$vsname = "$1"; $vsid = $2; $start = 0; $file = "/tmp/zabbix_fw_vsx_resctrl_-u_stat"; unless (-f $file){print 9999;exit} foreach (`cat $file`){s/^\s{0,}//; $start = 0 if /Avg\./; $start = 1 if /$vsname/; next unless $start; s/.*?\|\s{1,}//; @split = split/\s{1,}/; $cpu += $split[4]} $corexl = `source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null ; fw ctl multik stat 2>&1`; if ($corexl =~ /disabled/){print $cpu;exit}; $corexl_count = (scalar split /\n/, $corexl)-2;  print ($cpu/$corexl_count);'

UserParameter=discovery_route_arping,perl -e '$first = 0; print "{\n"; print "\t\"data\":[\n\n";  $hostname = `hostname`; chomp $hostname; foreach (`echo "0 | S"; vsx stat -v 2>/dev/null`){s/^\s*`?//; next unless /^\d/; @split = split/\s{1,}/;next unless $split[2] eq "S"; if ($split[2] eq "S"){undef %gw;  ($vsname) = `source /etc/profile.d/vsenv.sh; vsenv $split[0] 2>/dev/null` =~ /_(.*?) /;} $vsname = $hostname if $split[0] == 0; next unless $vsname; $vsid = $split[0]; foreach (`source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null ; ip route`){ chomp; next unless /scope link  src/; @s = split/\s{1,}/; $ip = $s[0]; $ip =~ s/\/.*//;  if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#VSNAME}\":\"$vsname\", \t\t\"{#VSID}\":\"$vsid\",\t\t\"{#IP}\":\"$ip\"}";}} print "\n\t]"; print "}\n";'

UserParameter=arping_other_member[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $ip = "$1"; $vsid = "$2"; foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null ; ip route", "a", 600)){next unless /$ip/;$line = $_; @s = split/\s{1,}/; $dev = $s[2]; $source = $s[8];} ($ip_front,$ip_end) = $ip =~ /(.*\.)(\d{1,})/; foreach (1 .. 2){ $ip_end++; next if $line =~ /$ip_front$ip_end/; $arp = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null ; arping -c 3 -I $dev -s $source $ip_front$ip_end", "s", 600); if ($arp =~ /Received 0/){print 2}elsif ($arp =~ /Received \d/){print 1}else{print 2} exit; }'

UserParameter=download_rpm,perl -e '$fw = `fw ver`; unless ($fw =~ /software version/){print 9999} ($ver) = $fw =~ / version (.*?) /; unless ($ver){print 9999} $ver = lc $ver; $url = "http://zabbix.kjartanohr.no/zabbix/repo/$ver/rpms/auto/";  $dir_local = "/usr/share/zabbix/repo/rpms/auto/"; system "mkdir -p $dir_local/"; $curl = `curl_cli -k -s $url`; foreach ($curl =~ /<a href="(.*?)">/g){next unless /\.rpm/;  ($rpm_name) = /(.*?)\./; $rpm_qa = `rpm -qa | grep $rpm_name`; if ($rpm_qa){next} $curl_dl = `curl_cli -k -s "$url$_" -o "$dir_local$_" `; unless (-f "$dir_local$_"){print 9999} $rpm = `rpm -Uvh --force --nodeps $dir_local$_ 2>&1`; print $_ } '

#UserParameter=download_scripts,perl -e '$fw = `fw ver`; unless ($fw =~ /software version/){print "Could not get FW version from fw ver"} ($ver) = $fw =~ / version (.*?) /; unless ($ver){print "Could not extract FW version from fw ver"} $ver = lc $ver; $url = "http://zabbix.kjartanohr.no/zabbix/repo/$ver/scripts/auto/";  $dir_local = "/usr/share/zabbix/repo/scripts/auto/"; system "mkdir -p $dir_local/ &>/dev/null"; $curl = `curl_cli -k -s $url`; foreach (split/\n/, $curl){next unless /<a href="/; next if /C=D;O=A|PARENTDIR/; ($file_remote) = /<a href="(.*?)">/; ($file_remote_mtime) = /align="right">(.*?) </; chomp($file_remote_mtime = `date "+%s" -d "$file_remote_mtime"`); $file_local = $dir_local.$file_remote; $file_local_mtime = (stat($file_local))[9]; if ($file_local_mtime > $file_remote_mtime){next}; system "mv -f $file_local $file_local.old &>/dev/null"; $curl_dl = `curl_cli -k -s $url$file_remote -o $file_local`; unless (-f $file_local){print "Could not find the downloaded file $file_local"; exit;} print "Downloaded file $file_remote"; system "chmod +x $file_local"; $file_test = `$file_local --zabbix-test-run`; unless ($file_test =~ /ZABBIX TEST OK/){print "Test run failed for $file_local";} }'

UserParameter=download_scripts,/usr/share/zabbix/repo/scripts/auto/download_repo_scripts.pl

UserParameter=nohup[*],nohup $1 &>/dev/null </dev/null &

UserParameter=license_days_left,perl -e '$lic_sec_min = 9x100; foreach (`cplic print`){next unless /^\d.*\|/; next if /-TE-| CPCES-CO-STANDARD-ADD/; @s = split/\s{1,}/; $lic_date = $s[4] ; chomp(($lic_sec) = `date -d"$lic_date" +%s`); $lic_sec_min = $lic_sec if $lic_sec < $lic_sec_min} $time = ($lic_sec_min-time); if ($lic_sec_min < time){print 0;exit} print int( ((($time/60) /60) / 24) )'

UserParameter=fw_policy_install_days_since[*],perl -e '$vsid = $1; foreach (`source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null ; fw stat`){next unless /local/; @s = split/\s{1,}/; $date = $s[2] ; chomp(($date_sec) = `date -d"$date" +%s`);  $time = (time-$date_sec); print int( ((($time/60) /60) / 24) )}

UserParameter=arping_cphaprob_ip,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_gw_cluster"){print 0;exit} foreach (run_cmd("cphaprob state", "a", 600)){next unless /^\d/; @s = split/\s{1,}/; if (/local/){$source = $s[2];next} $ip = $s[1]; foreach (`ip a`){next unless /$source/; @s = split/\s{1,}/; $int = $s[7]; } $cmd = "arping -I $int -c 1 $ip"; $ping = `$cmd`; if ($ping =~ /Received 1 response/){print 1}else{print 2}  }'

UserParameter=connections_top[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_gw"){exit} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; fwaccel conns", "a", 600)){s/^\s{1,}//; @s = split/\s{1,}/; $ip{$s[0]} +=1; $ip{$s[2]} +=1;} foreach $key (%ip){next unless $key =~ /\./; $count = ($ip{$key}/2); print "$count = $key\n";}' | sort -nr | head -n$2

UserParameter=connections_top_more_than[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (-f "/tmp/is_gw"){exit} $ifc = run_cmd(qq#source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; ifconfig | grep -P -o "inet addr:.*?"#, "s", 600); foreach (`source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null ; fwaccel conns`){s/^\s{1,}//; @s = split/\s{1,}/; $ip{$s[0]} +=1; $ip{$s[2]} +=1;} foreach $key (%ip){next unless $key =~ /\./; next if $key =~ /$3/; next if $ifc =~ /$key/; next unless $ip{$key} > $2; print "$ip{$key} = $key \n";}'

UserParameter=connections_dest_ip[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $ip_dest = "$2"; $vsid = "$1"; $file = "/tmp/zabbix_fwaccel_conns_$vsid"; $tc = (stat($file))[9]; if ((time()-$tc) > 60*2){unlink "$file.lock"} while (-f "$file.lock"){if (++$wait == 10){print 7777;exit}; sleep 1;}  $tc = (stat($file))[9]; if ((time()-$tc) > 60*2){system "touch $file.lock"; system qq#source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null ; fwaccel conns 2>&1 &>$file#; unlink "$file.lock"} unless (-f "/tmp/is_gw"){exit} foreach (run_cmd("cat $file", "a", 600)){s/^\s{1,}//; @s = split/\s{1,}/; $ip{$s[0]} +=1; $ip{$s[2]} +=1;} print int($ip{$ip_dest}/2)'

UserParameter=total_bytes_net,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("cat /proc/net/dev", "a", 60)){s/^\s{1,}//; next unless /^eth/; s/^et.*?://; s/^\s{1,}//;  @s = split/\s{1,}/;  $tot += $s[0]; $tot += $s[8]}; print $tot;' 

UserParameter=find_big_files[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("find / -type f -size +$1 2>/dev/null", "a", 2*60*60)){next if m#/var/log/jail/|locale-archive|Solr/solr|log_indexes|database/postgresql|sav/sigs/|ted_local_db|appfw_tables.sqlite|CPda|CPView_history|files_repository|/sysimg|/fw.log|/var/log/db|20\d\d-\d\d-\d\d.*log#; chomp; $cmd = run_cmd("du -hs "$_"", "s", 600); next if $cmd =~ m#^0#; print $cmd  }'

UserParameter=delete_old_log_files,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} unless (run_cmd("cpprod_util FwIsFirewallMgmt", "s", 600) =~ /0/){exit} if (-f "/tmp/is_mgmt"){exit} unless (-f "/tmp/is_gw"){exit} if (run_cmd("fwm ver", "s", 6000) =~ /is Check/){exit} chomp ($date = run_cmd(qq#date +"%Y"#, "s", 6000)); foreach (0 .. 7){push @date, run_cmd(qq#date --date="$_ days ago" +"%Y-%m-%d"#, "a", 600)} LOOP: foreach (run_cmd("find /var/log 2>/dev/null", "a", 2*60*60)){next unless /$date-\d\d-\d\d/; next unless /ptr$|log$/; foreach $date (@date){chomp $date; next LOOP if $_ =~ /$date/} $count++; chomp; unlink $_; } print $count if $count '

UserParameter=find_timeout,perl -e 'eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 10; system "find / &>/dev/null"}; if ($@){print 9999}else{print 1}'

UserParameter=cmd_time[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} eval { local $SIG{ALRM} = sub { die "alarm\n" }; alarm 10; $content = run_cmd(qq#source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; script -f /dev/null -c "time -p $2 2>&1"#, "s", 600);  ($time) = $content =~ /real (\d{1,}\.\d{1,})/; print int $time }; if ($@){print 9999}' 

UserParameter=vpn_sa_count[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $vsid = "$1" || 0; $sa_max = "$2" ||4; exit -f "/tmp/is_mgmt"; foreach (run_cmd(qq#source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null ; echo "show tunnels IPsec all"|vpn shell#, "a", 600)){($peer) = /^Peer\s{1,}(.*)/ if /^Peer/; s/^\s{1,}//; next unless /^\d/; $db{$peer} +=1 } foreach $key (keys %db){next unless $db{$key} > $sa_max;  print "$key $db{$key}\n" }'

UserParameter=logrotate_config_creator,/usr/share/zabbix/repo/scripts/auto/logrotate_config_creator.pl

UserParameter=dnsmasq_start,/usr/share/zabbix/repo/scripts/auto/dnsmasq_watchdog.pl

UserParameter=dmesg_error_msg,perl -e 'foreach (`dmesg`){next unless /^\[\d\d/; next if /buffer to size|do_coredump|script.*segfault|EXT3 FS|kjournald starting|EXT3-fs: mounted|promiscuous mode/; s/^.*?] //; s/ \d{2,} / /; chomp;  $db{$_} +=1; } foreach (keys %db){next unless $db{$_} > 100; print "$_ $db{$_}\n"}'

UserParameter=fwk.elg[*],/usr/share/zabbix/repo/scripts/auto/read_fwk.elg $1 $2
#UserParameter=fwk.elg[*],source /etc/profile.d/vsenv.sh; vsenv $1 &>/dev/null && /usr/share/zabbix/repo/scripts/auto/read_fwk.elg $1 $2

UserParameter=read_elg[*],/usr/share/zabbix/repo/scripts/auto/read_elg.pl $1

UserParameter=cphaprob_a_if_down_if[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} foreach (run_cmd("source /etc/profile.d/vsenv.sh; vsenv $1&>/dev/null ; cphaprob -a if", "a", 600)){next unless /DOWN/; ($if) = /.*\((.*?)\)$/; print $if}'

UserParameter=time_sync,/usr/share/zabbix/repo/scripts/auto/time_sync.pl

UserParameter=cpstat_sensors_discovery,perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $first = 0; print "{\n"; print "\t\"data\":[\n\n"; foreach (run_cmd("cpstat os -f sensors", "a", 600)){next unless /^\|/; next if /\|Name/; next if /0x0/;  @split = split/\|/; $split[1] =~ s/\s{2,}//; $split[4] =~ s/\s{1,}//; if ($first ne 0){print ","}$first++; print "\n{\t\t\"{#NAME}\":\"$split[1]\", \t\t\"{#TYPE}\":\"$split[4]\"}";  } print "\n\t]}";'

UserParameter=days_left[*],perl -e '$out = `$1`; ($time) = $out =~ /$2/; unless ($time){print 9999;exit} $days_left = ($time-time)/60/60/24; print int $days_left '

UserParameter=run_perl[*],perl $1

UserParameter=perl[*],perl $1

UserParameter=perl5.32.0[*],/usr/bin/perl5.32.0 $1

#UserParameter=fping[*],perl -e '$vsid = "$2" || 0; foreach (`source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null && fping -c 50 -e -p 1 -i 50 $1 2>&1`){next unless /% loss/; next if /0% loss/; print }'

#UserParameter=fping[*],perl -e '$vsid = "$2" || 0; foreach (`source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null && fping -c 50 -e -p 1 -i 50 $1 2>&1`){next unless /% loss/; next if / 0% loss/; ($loss) = /(\d*?)% loss/; $loss_high = $loss if $loss > $loss_high } print "$loss_high% loss" if $loss_high'

#UserParameter=fping_v2[*], perl -e '$ip = "$1" || die 9999; $vsid = "$2" || 0; $loss_limit = "$3" || 20; foreach (`source /etc/profile.d/vsenv.sh; vsenv $vsid&>/dev/null && fping -c 50 -e -p 1 -i 50 $ip 2>&1`){next unless /% loss/; next if / 0% loss/; ($loss) = /(\d*?)% loss/; $loss_high = $loss if $loss > $loss_high } if ($loss_high < $loss_limit){print 0;exit}else{print $loss_high}'

UserParameter=fping[*], perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $ip = "$1" || die 9999; $vsid = "$2" || 0; $count = "$3" || 50;  $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null ; fping -c 50 -i 100 -t 100 -e -p 20 $ip 2>&1", "s", 600); ($loss_percent) = $out =~ /\/(\d{1,})%/; print $loss_percent' 

UserParameter=fping_v2[*], perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $ip = "$1" || die 9999; $vsid = "$2" || 0; $count = "$3" || 50;  $out = run_cmd("source /etc/profile.d/vsenv.sh; vsenv $vsid &>/dev/null ; fping -c 50 -i 100 -t 100 -e -p 20 $ip 2>&1", "s", 600); ($loss_percent) = $out =~ /\/(\d{1,})%/; print $loss_percent' 

UserParameter=proc_net_dev[*], perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $split_id = "$1"; $times = "$2"; foreach (run_cmd("cat /proc/net/dev", "a", 600)){s/^\s{1,}//; next unless /^eth/; s/^et.*?://; s/^\s{1,}//;  @s = split/\s{1,}/;  $tot += $s[$split_id]; }; if ($times) {$tot *= $times} print $tot;'

UserParameter=download_file[*],ls "$2" &>/dev/null || curl_cli "$1" -o "$2"
UserParameter=download_file_time[*],curl_cli -o "$2" -z "$2" "$1"

UserParameter=dns_latency[*],perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} $vsid = "$1"; $vsid = 0 unless defined $vsid; my $domain = "$2" || "vg.no"; $server = "$3"; $server = "\@$server" if $server;  my $out = run_cmd("vsenv $vsid ; dig +time=1 +tries=1 +retry=1 $domain $server", "s", 600); ($timeout) = $out =~ m/Query time: (\d*) msec/; if (defined $timeout){print $timeout}elsif ($out =~ /timed out/){print 9999}else{print 8888} '

UserParameter=postgres_run.pl[*],/usr/share/zabbix/repo/scripts/auto/postgres_run.pl $1

UserParameter=run_cmd[*], perl -e 'BEGIN {require "/usr/share/zabbix/repo/files/auto/lib.pm"} my $cmd = "$1" || die "Missing input. Need a command to run"; my $ttl = "$2" || 6000; print run_cmd($cmd, "s", $ttl);'

UserParameter=get_text[*],/usr/share/zabbix/repo/scripts/auto/get_text.pl $1




#END OF FILE
